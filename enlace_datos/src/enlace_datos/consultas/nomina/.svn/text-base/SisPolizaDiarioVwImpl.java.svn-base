package enlace_datos.consultas.nomina;


import enlace_datos.consultas.nomina.common.SisPolizaDiarioVw;

import enlace_datos.util.utils;

import enlace_datos.util.utils_DB;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.ResultSet;

import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SisPolizaDiarioVwImpl extends ViewObjectImpl implements SisPolizaDiarioVw {
    /**This is the default constructor (do not remove)
     */
    public SisPolizaDiarioVwImpl() {
    }


    /**Gets the bind variable value for fechaF
     */
    public Date getfechaF() {
        return (Date)getNamedWhereClauseParam("fechaF");
    }

    /**Sets <code>value</code> for bind variable fechaF
     */
    public void setfechaF(Date value) {
        setNamedWhereClauseParam("fechaF", value);
    }

    /**Gets the bind variable value for fechaI
     */
    public Date getfechaI() {
        return (Date)getNamedWhereClauseParam("fechaI");
    }

    /**Sets <code>value</code> for bind variable fechaI
     */
    public void setfechaI(Date value) {
        setNamedWhereClauseParam("fechaI", value);
    }

    /**executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object params[], int noUserParams) {

    super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**createRowFromResultSet - overridden for custom java data source support.
     */
    protected ViewRowImpl createRowFromResultSet(Object qc, 
                                                 ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**getEstimatedRowCount - overridden for custom java data source support.
     */
    public long getEstimatedRowCount() {
        long value = super.getEstimatedRowCount();
        return value;
    }
    
    public void insertar_datos_poliza_diario(Date fechaI,Date fechaF){
       
       if (fechaI==null || fechaF==null){
        throw new JboException("Por favor ingrese la fecha inicio y fin de la poliza de diario");   
           
       }
       
       /*
        * comentado por J.M. 21-05-2012
       try{
       SisPolizaDiarioVwRowImpl vFila;
       vFila=(SisPolizaDiarioVwRowImpl)this.createRow(); 
       vFila.setFechaInicio(fechaI);
       vFila.setFechaFin(fechaF);
       this.insertRow(vFila);
           this.getDBTransaction().commit();
       }catch(Exception exp){
        //  exp.printStackTrace();
         // exp.getStackTrace()
           this.getDBTransaction().rollback();
           throw new JboException(utils.getSQLMensaje(exp));   
          
       }
       */
       
       // verificar que todas las partidas a insertar en CONTA.detalle existan en el catalogo de contabilidad
       NameValuePairs ParametrosFunc=new NameValuePairs();
       Object contador;
         
       ParametrosFunc.setAttribute("1",fechaI);
       ParametrosFunc.setAttribute("2",fechaF);
       contador = utils_DB.getValorFuncion(this.getDBTransaction(),"sis_pkg_procs.VERIFICA_EXISTE_CONTA_PARTIDA(?,?)",ParametrosFunc);
       if(Integer.parseInt(contador.toString()) > 0){
           throw new JboException("Una o mas partidas a incluir en la poliza de diario no existe en el catálogo de partidas del Sistema de Contabilidad, por favor genere el reporte de las partidas que no existen en Contabilidad.");
       }
       
       // invocar el metodo SIS_PKG_PROCS.GENERA_POLIZA_DIARIO(p_fecha_inicio in date, p_fecha_fin in date, p_usuario in varchar2, p_poliza_contable_ini in number)
       NameValuePairs Parametros=new NameValuePairs();
       String resultado = "OK";
        
       Parametros.setAttribute("1",fechaI);
       Parametros.setAttribute("2",fechaF);
       Parametros.setAttribute("3",utils.getAuthUser(this.getDBTransaction()));       
        
       resultado = utils_DB.ejecutarProcedimiento3(this.getDBTransaction(),"sis_pkg_procs.GENERA_POLIZA_DIARIO(?,?,?)",Parametros);
       if (resultado.compareToIgnoreCase("OK")!=0){
           int posIni=resultado.indexOf("<<");
           int posFin=resultado.indexOf(">>");
           if(posIni > 0 && posFin > 0){
               resultado=resultado.substring(posIni+2, posFin);
           }
           throw new JboException(resultado);
       }       
       
       this.getDBTransaction().getRootApplicationModule().findViewObject("SisPolizaDiarioVw").executeQuery();
        
    }
    
    public void crear_poliza_contable(oracle.jbo.domain.Number pNoPoliza, oracle.jbo.domain.Number pNoPolizaConta){
       
       if (pNoPoliza==null || pNoPolizaConta==null){
        throw new JboException("Por favor ingrese el número de poliza contable");   
           
       }
       
       // invocar el metodo 
       // PROCEDURE GENERA_POLIZA_CONTABLE(vNoPoliza IN NUMBER, pPolizaContable IN NUMBER, pUsuario IN VARCHAR2)
       NameValuePairs Parametros=new NameValuePairs();
       String resultado = "OK";
        
       Parametros.setAttribute("1",pNoPoliza);
       Parametros.setAttribute("2",pNoPolizaConta);
       Parametros.setAttribute("3",utils.getAuthUser(this.getDBTransaction()));       
        
       resultado = utils_DB.ejecutarProcedimiento3(this.getDBTransaction(),"sis_pkg_procs.GENERA_POLIZA_CONTABLE(?,?,?)",Parametros);
       if (resultado.compareToIgnoreCase("OK")!=0){
           int posIni=resultado.indexOf("<<");
           int posFin=resultado.indexOf(">>");
           if(posIni > 0 && posFin > 0){
               resultado=resultado.substring(posIni+2, posFin);
           }
           throw new JboException(resultado);
       }       
       
       this.getDBTransaction().getRootApplicationModule().findViewObject("SisPolizaDiarioVw").executeQuery();
        
    }
    
    // poliza de anulados
    //
     public void insertar_datos_poliza_anulados(Date fechaI, Date fechaF){
        
        if (fechaI==null || fechaF==null){
         throw new JboException("Por favor ingrese la fecha inicio y fin de la poliza de diario");   
            
        }
        
        // verificar que todas las partidas a insertar en CONTA.detalle existan en el catalogo de contabilidad
        /*
        NameValuePairs ParametrosFunc=new NameValuePairs();
        Object contador;
          
        ParametrosFunc.setAttribute("1",fechaI);
        ParametrosFunc.setAttribute("2",fechaF);
        contador = utils_DB.getValorFuncion(this.getDBTransaction(),"pkg_pruebas.VERIFICA_EXISTE_CONTA_PARTIDA2(?,?)",ParametrosFunc);
        if(Integer.parseInt(contador.toString()) > 0){
            throw new JboException("Una o mas partidas a incluir en la poliza de diario no existe en el catálogo de partidas del Sistema de Contabilidad, por favor genere el reporte de las partidas que no existen en Contabilidad.");
        }
        */
        
        // invocar el metodo SIS_PKG_PROCS.ASIGNA_POLIZA_DIARIO_ANULADOS(p_fecha_inicio in date, p_fecha_fin in date, p_usuario in varchar2)
        NameValuePairs Parametros=new NameValuePairs();
        String resultado = "OK";
         
        Parametros.setAttribute("1",fechaI);
        Parametros.setAttribute("2",fechaF);
        Parametros.setAttribute("3",utils.getAuthUser(this.getDBTransaction()));       
         
        resultado = utils_DB.ejecutarProcedimiento3(this.getDBTransaction(),"sis_pkg_procs.ASIGNA_POLIZA_DIARIO_ANULADOS(?,?,?)",Parametros);
        if (resultado.compareToIgnoreCase("OK")!=0){
            int posIni=resultado.indexOf("<<");
            int posFin=resultado.indexOf(">>");
            if(posIni > 0 && posFin > 0){
                resultado=resultado.substring(posIni+2, posFin);
            }
            throw new JboException(resultado);
        }       
        
        this.getDBTransaction().getRootApplicationModule().findViewObject("SisPolizaDiarioVw").executeQuery();
         
     }
     
     public void crear_poliza_contable_anulados(oracle.jbo.domain.Number pNoPoliza, oracle.jbo.domain.Number pNoPolizaConta){
        
        if (pNoPoliza==null || pNoPolizaConta==null){
         throw new JboException("Por favor ingrese el número de poliza contable");   
            
        }
        
        // invocar el metodo 
        // PROCEDURE GENERA_POLIZA_CONTA_ANULADOS(vNoPoliza IN NUMBER, pPolizaContable IN NUMBER, pUsuario IN VARCHAR2)
        NameValuePairs Parametros=new NameValuePairs();
        String resultado = "OK";
         
        Parametros.setAttribute("1",pNoPoliza);
        Parametros.setAttribute("2",pNoPolizaConta);
        Parametros.setAttribute("3",utils.getAuthUser(this.getDBTransaction()));       
         
        resultado = utils_DB.ejecutarProcedimiento3(this.getDBTransaction(),"sis_pkg_procs.GENERA_POLIZA_CONTA_ANULADOS(?,?,?)",Parametros);
        if (resultado.compareToIgnoreCase("OK")!=0){
            int posIni=resultado.indexOf("<<");
            int posFin=resultado.indexOf(">>");
            if(posIni > 0 && posFin > 0){
                resultado=resultado.substring(posIni+2, posFin);
            }
            throw new JboException(resultado);
        }       
        
        this.getDBTransaction().getRootApplicationModule().findViewObject("SisPolizaDiarioVw").executeQuery();
         
     }
     
    public void crear_poliza_conta(oracle.jbo.domain.Number pNoPoliza, oracle.jbo.domain.Number pNoPolizaConta, String pTipoPoliza){
        if(pTipoPoliza.compareToIgnoreCase("POLIZA_SUELDOS")==0){
            this.crear_poliza_contable(pNoPoliza, pNoPolizaConta);
        }
        else{
            this.crear_poliza_contable_anulados(pNoPoliza, pNoPolizaConta);   
        }
    }
    
}
