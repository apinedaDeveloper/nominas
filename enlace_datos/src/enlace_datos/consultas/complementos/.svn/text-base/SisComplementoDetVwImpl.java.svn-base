package enlace_datos.consultas.complementos;

import enlace_datos.consultas.complementos.common.SisComplementoDetVw;

import enlace_datos.util.utils_DB;
import enlace_datos.util.utils;
import java.util.Date;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SisComplementoDetVwImpl extends ViewObjectImpl implements SisComplementoDetVw {
    /**This is the default constructor (do not remove)
     */
    public SisComplementoDetVwImpl() {
    }
    
    public void borrarDetAjuste(){
        
        SisComplementoDetVwRowImpl vfila;        
        vfila=(SisComplementoDetVwRowImpl)this.getCurrentRow();
        RowIterator vFilasDet;
        
        
        vFilasDet=vfila.getSisComplementoDetajustesVw();
        
        while (vFilasDet.hasNext()){
            
            vFilasDet.next();
            vFilasDet.removeCurrentRow();            
        }
        
        //this.removeCurrentRow();  
        
    }
    
    
    public void borrarDetComple(){
        
        SisComplementoDetVwRowImpl vfila;        
        vfila=(SisComplementoDetVwRowImpl)this.getCurrentRow();
        RowIterator vFilasDet;
        
        
        vFilasDet=vfila.getSisComplementoDetajustesVw();
        
        while (vFilasDet.hasNext()){
            
            vFilasDet.next();
            vFilasDet.removeCurrentRow();            
        }
        
        this.removeCurrentRow();  
        
    }
    

    public void cambiarEstadoActual(Boolean pValor){
        
        
       Row pFila;
       pFila=this.getCurrentRow();
       pFila.setAttribute("isSel",pValor);  
       
                
    }


    public void cambiarEstadoTodos(Boolean pValor){
        
       Row []pFilas;
       int vTam; 
       pFilas=this.getAllRowsInRange();
        
       vTam=pFilas.length;
       
       for (int i=0;i<vTam;i++){
         
         pFilas[i].setAttribute("isSel",pValor);  
           
       }
                
    }
    
   public void agregarDescuento(Number pIdCompDet,Number pIdAjuste,Number pValor,String pUsuario){
       Object resultado = "CORRECTO";
       NameValuePairs vParametros;
       vParametros = new NameValuePairs();
       
       vParametros.setAttribute("1",pIdCompDet);
       vParametros.setAttribute("2",pIdAjuste);
       vParametros.setAttribute("3",pValor);
              
        if(pIdAjuste.equals("21") || pIdAjuste.equals("25")){
            resultado=utils_DB.getValorFuncion(this.getDBTransaction(),"sis_complementos_pkg.validaDescIGSS(?,?,?)",vParametros);
        }
        
       if(resultado.equals("CORRECTO")){
           vParametros.setAttribute("4",pUsuario);
           if (!utils_DB.ejecutarProcedimiento(this.getDBTransaction(),"sis_complementos_pkg.agregardescuentocomple(?,?,?,?)",vParametros)){
              throw new JboException("Ha ocurrido un error, por favor intente nuevamente","01",null);
           }else{
               this.getDBTransaction().commit();
           }
        }
        else{
            throw new JboException(resultado.toString());              
        }
                               
   }
   
    public void Descuento_Diferido50(Number pIdCompDet, Number pCorrelativo, Number pContrato, Number pCodNomina){
        NameValuePairs vParametros;
        vParametros = new NameValuePairs();

        String vConsulta;
        Object vFechaInicioAjuste;
        Object vFechaIS=null;
        Object vFechaFS=null;

        if(pCodNomina.compareTo(14)==0){
            vFechaIS="01/01/"+pCorrelativo;
            vFechaFS="30/06/"+pCorrelativo;
        }else{
            vFechaIS="01/07/"+pCorrelativo;
            vFechaFS="31/12/"+pCorrelativo;
        }

        vConsulta="select To_Char(fecha_inicio,'dd/mm/yyyy') fecha_inicio from sis_ajuste_contrato where id_contrato="+pContrato+" and id_ajuste=24 and estado='A'";        
        vFechaInicioAjuste=utils_DB.getEjecutarQuerry(this.getDBTransaction(),vConsulta);
        if (vFechaInicioAjuste!=null){
            //aqui se obtiene la fecha minima entre la fechaAjuste y la fecha inicio del semestre
            vConsulta="select to_char(Least(to_date('"+vFechaInicioAjuste+"','dd/mm/yyyy'),to_date('"+vFechaIS+"','dd/mm/yyyy')),'dd/mm/yyyy') fecha from dual";
            //System.out.println("vconsulta= "+vConsulta);
            vFechaIS=utils_DB.getEjecutarQuerry(this.getDBTransaction(),vConsulta);
            //System.out.println("nueva fechaI "+vFechaIS);
        }
        vParametros.setAttribute("1",pIdCompDet);
        vParametros.setAttribute("2",vFechaIS);  
        vParametros.setAttribute("3",vFechaFS);  
        vParametros.setAttribute("4",pContrato);
        vParametros.setAttribute("5",3); //Valor 3 indica que es para complemento por retiro

        if (!utils_DB.ejecutarProcedimiento(this.getDBTransaction(),"Sis_Prestaciones_Pkg.Descuento_Diferido50(?,?,?,?,?)",vParametros)){
           throw new JboException("No se pudo calcular el descuento Diferido50","01",null);
        }else{
            this.getDBTransaction().commit();
        }
    }

   
    public void actualiza_desc_bono(){    
        if (this.getRowCount()>0)     
        ((SisComplementoDetVwRowImpl)this.getCurrentRow()).actualiza_desc_bono();    
    }
    
    public void modPartidaEgresoVW(){    
        String vConsulta;
        
        Object vResult = -1, vPartidaN = -1;
        Row pFila;
        pFila=this.getCurrentRow();
        Object idPartida = pFila.getAttribute("IdPartida");  
        Object vTipoNomina = pFila.getAttribute("IdTipoNomina");  
        Double vvBono =  Double.parseDouble(pFila.getAttribute("TotalBono")+"");  
        Double vvComplemento =  Double.parseDouble(pFila.getAttribute("ComplSalarial")+"");  
        Double vvEscalafon =  Double.parseDouble(pFila.getAttribute("Escalafon")+"");  
        Double vvNominal =  Double.parseDouble(pFila.getAttribute("Nominal")+"");  
        Double vvSueldoBase = Double.parseDouble( pFila.getAttribute("SueldoBase")+"");  
        String vTipoN = vTipoNomina.toString();
        
        if ( vTipoN.compareTo("1")==0){ //SI ES NOMINA NORMAL REVISAR CEROS
            if (vvNominal == 0 && vvBono > 0){ 
                vConsulta="select sis_pkg_pagos.GETPARTIDAPAGOTA("+ idPartida + ",27) from dual";       
                vPartidaN=utils_DB.getEjecutarQuerry(this.getDBTransaction(),vConsulta);
            }else if (vvComplemento > 0 && vvSueldoBase == 0){       
                vConsulta="select sis_pkg_pagos.GETPARTIDAOTROSPAGOS("+ idPartida + ",'COMPLEMENTO') from dual";       
                vPartidaN=utils_DB.getEjecutarQuerry(this.getDBTransaction(),vConsulta);
            }else if (vvEscalafon > 0 && vvSueldoBase == 0){
                vConsulta="select sis_pkg_pagos.GETPARTIDAOTROSPAGOS("+ idPartida + ",'ESCALAFON') from dual";       
                vPartidaN=utils_DB.getEjecutarQuerry(this.getDBTransaction(),vConsulta);
            }
         
        } else { // SI LA NOMINA NO ES NORMAL.
            vConsulta="select sis_pkg_pagos.getPartidaPagoTP("+idPartida+","+vTipoNomina+") from dual";       
            vResult=utils_DB.getEjecutarQuerry(this.getDBTransaction(),vConsulta);
        }
        
        ((SisComplementoDetVwRowImpl)this.getCurrentRow()).modPartidaEgreso(vResult, vPartidaN);    
    }
    
    
    public void posicionaSeleccionado(){
        Row []pFilas;
        int vTam; 
        pFilas=this.getAllRowsInRange();
         
        vTam=pFilas.length;
        for (int i=0;i<vTam;i++){
          if ((Boolean)pFilas[i].getAttribute("isSel")==true){
              this.setCurrentRow(pFilas[i]);
              break;
          }
        }     
    } 
    
}
