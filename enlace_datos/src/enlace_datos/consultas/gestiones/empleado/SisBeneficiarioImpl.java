package enlace_datos.consultas.gestiones.empleado;

import enlace_datos.consultas.gestiones.empleado.common.SisBeneficiario;

import enlace_datos.util.utils;
import enlace_datos.util.utils_DB;

import java.sql.SQLException;

import java.util.Calendar;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------

public class SisBeneficiarioImpl extends ViewObjectImpl implements SisBeneficiario {

    /**This is the default constructor (do not remove)
     */
    public SisBeneficiarioImpl() {
    }


    //Procedimiento que borra un beneficiario de la lista

    public String borrarBeneficiario() {
        String mensaje;
        String nombre;
        if (this.getCurrentRow().getAttribute("RecibePago").equals("1")) {
            mensaje = 
                    "No se puede borrar el Beneficiario Seleccionado debido a que SI Recibe Pago.";
        } else {
            try {
                nombre = 
                        this.getCurrentRow().getAttribute("Nombre1").toString() + 
                        " " + 
                        this.getCurrentRow().getAttribute("Apellido1").toString();
                this.removeCurrentRow();
                this.getDBTransaction().commit();
                mensaje = 
                        "Se eliminó el beneficiario <" + nombre + "> exitósamente.";
            } catch (Exception e) {
                e.printStackTrace();
                mensaje = "Ocurrió un error al intentar borrar";
            }
        }
        return mensaje;
    }

    //Método que obtiene el registro de empleado del trabajador fallecido

    private String obtenerRegistroTrabajadorFallecido(Number pIdSolicitud) {
        Object vResultado;
        String strConsulta = 
            "select registro_empleado from sis_solicitud where id_solicitud = " + 
            pIdSolicitud;
        vResultado = 
                utils_DB.getEjecutarQuerry(this.getDBTransaction(), strConsulta);
        return vResultado != null ? vResultado.toString() : "-1";
    }

    //Método que toma el número de caracteres recibido como parámetro de una cadena recibida también como parámetro

    private String getValor(String pValor, int numCaracteres) {
        String pResultado = "";
        if (pValor == null || (pValor != null && pValor.equals("null")) || 
            (pValor != null && pValor.equals(""))) {
            pResultado = "";
        } else {
            if (numCaracteres > 0) {
                pResultado = 
                        pValor.length() > numCaracteres ? pValor.substring(0, 
                                                                           numCaracteres) : 
                        pValor;
            }
            pResultado = pValor + " ";
        }
        return pResultado;
    }

    //Método que obtiene la letra inicial de la cadena recibida como parámetro

    private String getInicial(String pValor) {
        String pIni;
        if (pValor != null && pValor.length() > 1)
            pIni = pValor.substring(0, 1);
        else
            pIni = "";
        return pIni;
    }

    //Método que quita las tildes de las letras mayúsculas de la cadena recibida como parámetro

    private String quitarAcentos(String pCadena) {
        String vModificado = "";
        if (pCadena != null) {
            vModificado = pCadena.replace("Á", "A");
            vModificado = vModificado.replace("É", "E");
            vModificado = vModificado.replace("Í", "I");
            vModificado = vModificado.replace("Ó", "O");
            vModificado = vModificado.replace("Ú", "U");
        }
        return vModificado;
    }

    //Método que genera el nombre de cheque.

    private String generarNombreCheque(String nombre1, String nombre2, 
                                       String nombre3, String apellido1, 
                                       String apellido2) {
        String nombreCompleto = nombre1.trim();
        if (nombre2 != null && nombre2.compareToIgnoreCase("") != 0) {
            nombreCompleto += " " + nombre2;
        }
        if (nombre3 != null && nombre3.compareToIgnoreCase("") != 0) {
            nombreCompleto += " " + nombre3;
        }
        nombreCompleto += " " + apellido1;
        if (apellido2 != null && apellido2.compareToIgnoreCase("") != 0) {
            nombreCompleto += " " + apellido2;
        }
        if (nombreCompleto.length() <= 32) {
            nombreCompleto = 
                    getValor(apellido1, -1) + getValor(apellido2, -1) + 
                    getValor(nombre1, -1) + getValor(nombre2, -1) + 
                    getValor(nombre3, -1);
        }
        if (nombreCompleto.length() > 32) {
            nombreCompleto = 
                    getValor(apellido1, -1) + getValor(apellido2, -1) + 
                    getValor(nombre1, -1) + getValor(nombre2, -1);
        }
        if (nombreCompleto.length() > 32) {
            nombreCompleto = 
                    getValor(apellido1, -1) + getValor(apellido2, -1) + 
                    getValor(nombre1, -1) + getInicial(getValor(nombre2, -1));
        }
        if (nombreCompleto.length() > 32) {
            nombreCompleto = 
                    getValor(apellido1, -1) + getValor(nombre1, -1) + getInicial(getValor(nombre2, 
                                                                                          -1));
        }
        nombreCompleto = nombreCompleto.trim();
        nombreCompleto = quitarAcentos(nombreCompleto);
        return nombreCompleto;
    }

    //Método que obtiene la cuenta bancaria habilitada del trabajador fallecido

    private String obtenerCuentaHabilitada(Number registro_empleado) {
        Object vResultado;
        String strConsulta = "Select numero from siif.sis_cuenta where";
        strConsulta += " registro_empleado = " + registro_empleado;
        strConsulta += " and id_banco = 1 and fecha_baja is null";
        System.out.println("La consulta en obtenerCuentaHabilitada es: " + 
                           strConsulta);
        vResultado = 
                utils_DB.getEjecutarQuerry(this.getDBTransaction(), strConsulta);
        return vResultado != null ? vResultado.toString() : "-1";
    }

    //Método que obtiene el Id de la cuenta bancaria habilitada del trabajador fallecido

    private String obtenerIdCuentaHabilitada(Number registro_empleado) {
        Object vResultado;
        String strConsulta = "Select id_cuenta from siif.sis_cuenta where";
        strConsulta += " registro_empleado = " + registro_empleado;
        strConsulta += " and id_banco = 1 and fecha_baja is null";
        System.out.println("La consulta en obtenerIdCuentaHabilitada es: " + 
                           strConsulta);
        vResultado = 
                utils_DB.getEjecutarQuerry(this.getDBTransaction(), strConsulta);
        return vResultado != null ? vResultado.toString() : "-1";
    }

    //Método que actualiza la observación de la tabla Sis Cuenta

    private void actualizarObservacionSisCuenta(Number registroEmpleado) {
        String idCuenta;
        idCuenta = obtenerIdCuentaHabilitada(registroEmpleado);
        String query = "update siif.sis_cuenta set ";
        query += 
                "observacion='Sueldos y Prestaciones por fallecimiento' where ";
        query += "id_cuenta = " + idCuenta;
        System.out.println("La sentencia en actualizarObservacionSisCuenta es: " + 
                           query);
        utils_DB.getEjecutarConsulta(this.getDBTransaction(), query);
    }

    //Método que verifica si hay alguna tupla en sis_cuenta para el trabajador fallecido.

    private String verificarTuplasSisCuenta(Number registro_empleado) {
        Object vResultado;
        String strConsulta = 
            "Select count(*) as cantidad from siif.sis_cuenta ";
        strConsulta += "where registro_empleado = " + registro_empleado;
        System.out.println("La consulta en verficarTuplasSisCuenta es: " + 
                           strConsulta);
        vResultado = 
                utils_DB.getEjecutarQuerry(this.getDBTransaction(), strConsulta);
        return vResultado != null ? vResultado.toString() : "-1";
    }

    //Método que cambia el número de cuenta bancaria habilitada del trabajador fallecido

    private void cambiarSisCuenta(Number registroEmpleado, String numeroCta) {
        String usuario = utils.getAuthUser(this.getDBTransaction());
        String vResultado;
        NameValuePairs vListado;
        vListado = new NameValuePairs();
        vListado.setAttribute("01", registroEmpleado);
        vListado.setAttribute("02", numeroCta);
        vListado.setAttribute("03", usuario);
        vResultado = 
                utils_DB.ejecutarProcedimiento3(this.getDBTransaction(), "sis_pkg_procs.CAMBIARCUENTABANCARIA(?,?,1,?)", 
                                                vListado);
        if (vResultado.toString().equals("OK")) {
            System.out.println("Se invocó al procedimiento CAMBIARCUENTABANCARIA correctamente.");
        } else {
            throw new JboException(vResultado);
        }
    }

    //Método que crea una cuenta bancaria para el trabajador fallecido

    private void crearSisCuenta(Number registroEmpleado, String numeroCta) {
        String vResultado;
        NameValuePairs vListado;
        vListado = new NameValuePairs();
        vListado.setAttribute("01", registroEmpleado);
        vListado.setAttribute("02", numeroCta);
        vListado.setAttribute("03", 
                              utils.getAuthUser(this.getDBTransaction()));
        vResultado = 
                utils_DB.ejecutarProcedimiento3(this.getDBTransaction(), "sis_pkg_procs.CREARCUENTABANCARIA(?,?,'BANRURAL',?)", 
                                                vListado);
        if (!vResultado.toString().equals("OK")) {
            throw new JboException(vResultado);
        } else {
            System.out.println("Se invocó al procedimiento CREARCUENTABANCARIA correctamente.");
        }
    }

    //Método que actualiza la tabla Sis Ficha Empleado

    private void actualizarSisFichaEmpleado(Number registroEmpleado, 
                                            String noCuenta) {
        String query = 
            "update siif.sis_ficha_empleado set nocuenta='" + noCuenta;
        query += "', statuscuenta=1, fechaokcuenta=sysdate ";
        query += "where registro_empleado=" + registroEmpleado;
        System.out.println("La sentencia en actualizarSisFichaEmpleado es: " + 
                           query);
        utils_DB.getEjecutarConsulta(this.getDBTransaction(), query);
    }

    //Método que verifica la información en las tablas sis_cuenta y sis_forma_pago

    private void verificarCuentaBancaria(String numeroCta, 
                                         Number registroEmpleado) throws SQLException {
        String cuentaHabilitada, hayTuplas;
        cuentaHabilitada = obtenerCuentaHabilitada(registroEmpleado);
        System.out.println("El resultado de cuentaHabilitada es: " + 
                           cuentaHabilitada);
        if (cuentaHabilitada.compareTo("-1") != 0) {
            System.out.println("El trabajador fallecido tiene una cuenta habilitada en SIS CUENTA");
            cambiarSisCuenta(registroEmpleado, numeroCta);
        } else {
            System.out.println("El trabajador fallecido no tiene una cuenta habilitada en SIS CUENTA");
            hayTuplas = verificarTuplasSisCuenta(registroEmpleado);
            System.out.println("Número de tuplas en Sis Cuenta: " + hayTuplas);
            if (hayTuplas.compareTo("-1") != 0 && 
                hayTuplas.compareTo("0") != 0) {
                cambiarSisCuenta(registroEmpleado, numeroCta);
            } else {
                crearSisCuenta(registroEmpleado, numeroCta);
            }
        }
    }

    private void verificarReciboPago_paso3(Object idBeneficiarioSel, 
                                           Object[] listadoBeneficiarios) {
        int contador = listadoBeneficiarios.length;
        SisBeneficiarioRowImpl beneficiario;
        contador = contador - 1;
        while (contador >= 0) {
            beneficiario = 
                    (SisBeneficiarioRowImpl)listadoBeneficiarios[contador];
            if (!idBeneficiarioSel.equals(beneficiario.getIdBeneficiario())) {
                beneficiario.setAttribute("RecibePago", "0");
                System.out.println("Se cambió el valor de Recibe Pago del beneficiario [" + 
                                   beneficiario.getIdBeneficiario() + 
                                   "] a NO.");
            }
            contador--;
        } // fin while
    }

    private void verificarReciboPago_paso2(Object idBeneficiarioSel) {
        boolean hayAlgunaTupla = false;
        SisBeneficiarioRowImpl beneficiario;
        Object listadoBeneficiarios[] = this.getAllRowsInRange();
        int contador = listadoBeneficiarios.length;
        if (contador > 1) { //Hay más de una tupla en la lista
            contador = contador - 1;
            while (contador >= 0) {
                beneficiario = 
                        (SisBeneficiarioRowImpl)listadoBeneficiarios[contador];
                if (!idBeneficiarioSel.equals(beneficiario.getIdBeneficiario()) && 
                    beneficiario.getAttribute("RecibePago") != null && 
                    beneficiario.getAttribute("RecibePago").toString().compareTo("1") == 
                    0) {
                    hayAlgunaTupla = true;
                    contador = -1; //para salir del ciclo
                }
                contador--;
            } // fin while
            if (hayAlgunaTupla == true) {
                System.out.println("Hay otra tupla en la lista con Recibe Pago SI");
                verificarReciboPago_paso3(idBeneficiarioSel, 
                                          listadoBeneficiarios);
            } else {
                System.out.println("No hay otra tupla en la lista con Recibe Pago SI");
            }
        } else {
            System.out.println("Hay menos de dos tuplas en la lista no se hará la verificación");
        }
    }

    //Verifica que solamente uno de los beneficiarios Reciba Pago de tipo Suelos y Prestaciones.

    private void verificarRecibePago(Row beneficiarioSeleccionado) {
        Object recibePago;
        Object idBeneficiario = 
            beneficiarioSeleccionado.getAttribute("IdBeneficiario");
        if (idBeneficiario != null && 
            idBeneficiario.toString().compareTo("") != 0) {
            recibePago = beneficiarioSeleccionado.getAttribute("RecibePago");
            if (recibePago != null) {
                if (recibePago.toString().compareTo("1") == 0) {
                    System.out.println("Sí recibe pago.");
                    verificarReciboPago_paso2(idBeneficiario);
                } else {
                    System.out.println("No recibe pago.");
                }
            } else {
                System.out.println("recibePago es nulo.");
            }
        }
        System.out.println("Se verificó que solo uno de los beneficiarios con cuenta validada reciba pago correctamente.");
    }

    //Procedimiento que actualiza el campo nom_beneficiario de la tabla sis_empleado

    private int actualizarSisEmpleado(String nombre, String usuario, 
                                      Number registroEmpl) {
        int resultado = 0;
        String strConsulta = 
            "update sis_empleado set nom_beneficiario = upper('" + nombre;
        strConsulta += "'), mod_por='" + usuario;
        strConsulta += "', fecha_modificacion=sysdate where ";
        strConsulta += "registro_empleado = " + registroEmpl;
        System.out.println("La sentencia en actualizarSisEmpleado es: " + strConsulta);
        resultado = 
                utils_DB.getEjecutarConsulta(this.getDBTransaction(), strConsulta);
        return resultado;
    } //3607-4918   --CLARO - 5777

    //Método que actualiza algunos campos de la tabla sis_beneficiario

    private void actualizarSisBeneficiario(Row r) throws SQLException {
        r.setAttribute("IdBanco", new Number("1"));
        r.setAttribute("EstadoCuenta", new Number("1"));
        //Vamos a setear la fecha de modificación
        Object fecha = new oracle.jbo.domain.Date().getCurrentDate();
        Calendar calendario = Calendar.getInstance();
        int hora = calendario.get(Calendar.HOUR_OF_DAY);
        int minutos = calendario.get(Calendar.MINUTE);
        int segundos = calendario.get(Calendar.SECOND);
        oracle.jbo.domain.Date fechaHora = 
            new oracle.jbo.domain.Date(fecha.toString() + " " + 
                                       String.valueOf(hora) + ":" + 
                                       String.valueOf(minutos) + ":" + 
                                       String.valueOf(segundos));
        r.setAttribute("FechaOkCuenta", fechaHora);
        System.out.println("Se actualizaron algunos campos pendientes en Sis Beneficiario correctamente.");
    }

    //Método que procesa la información ya validada

    private String procesarGuardarBeneficiario(oracle.jbo.domain.Number pIdSolicitud, 
                                               oracle.jbo.domain.Number pIdParentesco, 
                                               String pCui, 
                                               oracle.jbo.domain.Number pRecibePago, 
                                               String pNombre1, 
                                               String pNombre2, 
                                               String pNombre3, 
                                               String pApellido1, 
                                               String pApellido2, 
                                               String pUsuario, 
                                               String registroEmpleado, 
                                               Boolean cuentaValidada) {
        String nomCheque, mensaje;
        try {
            mensaje = "Undefined";
            Row r = this.getCurrentRow();
            r.setAttribute("IdSolicitud", pIdSolicitud.toString());
            r.setAttribute("IdParentesco", pIdParentesco.toString());
            r.setAttribute("Cui", pCui);
            r.setAttribute("RecibePago", pRecibePago.toString());
            pNombre1 = pNombre1.trim();
            r.setAttribute("Nombre1", pNombre1);
            if (pNombre2 != null) {
                pNombre2 = pNombre2.trim();
            }
            r.setAttribute("Nombre2", pNombre2);
            if (pNombre3 != null) {
                pNombre3 = pNombre3.trim();
            }
            r.setAttribute("Nombre3", pNombre3);
            pApellido1 = pApellido1.trim();
            r.setAttribute("Apellido1", pApellido1);
            if (pApellido2 != null) {
                pApellido2 = pApellido2.trim();
                //System.out.println("pApellido2 es: " + pApellido2);
            } else {
                //System.out.println("pApellido2 es nulo.");
            }
            r.setAttribute("Apellido2", pApellido2);
            Object auxId = 
                r.getAttribute("IdBeneficiario"); // beneficiario actual
            if (auxId != null) { //Es una actualización
                r.setAttribute("ModPor", pUsuario);
            } else {
                r.setAttribute("CreadoPor", pUsuario);
            }
            nomCheque = 
                    generarNombreCheque(pNombre1, pNombre2, pNombre3, pApellido1, 
                                        pApellido2);
            r.setAttribute("Nomcompletocheq", nomCheque);
            Object numeroCuenta = r.getAttribute("NumeroCuenta");
            if (cuentaValidada != null && 
                cuentaValidada.booleanValue() == true) {
                System.out.println("Se verificará la cuenta bancaria validada");
                Number reg = new Number(registroEmpleado);
                String numCta = numeroCuenta.toString();
                verificarCuentaBancaria(numCta, reg);
                if (actualizarSisEmpleado(nomCheque, pUsuario, reg) > 0) {
                    //actualizó algunos campos de Sis_empleado
                    System.out.println("La sentencia de actualizarSisEmpleado se ejecutó correctamente.");
                    actualizarSisFichaEmpleado(reg, 
                                               numCta); //actualizar algunos campos en Sis Ficha Empleado
                    System.out.println("La sentencia de actualizarSisFichaEmpleado se ejecutó correctamente.");
                    actualizarSisBeneficiario(r); //actualizar algunos campos pendientes en Sis Beneficiario
                    actualizarObservacionSisCuenta(reg); //actualizar las observaciones en Sis Cuenta
                     System.out.println("La sentencia de actualizarObservacionSisCuenta se ejecutó correctamente.");
                } else {
                    System.out.println("Hubo un error en la sentencia de actualizarSisEmpleado.");
                    mensaje = 
                            "Hubo un error al actualizar la entidad EMPLEADO. ";
                }
                verificarRecibePago(r); //Verifica que solo uno de los beneficiarios con cuenta validada reciba pago
            } else {
                System.out.println("No se verificó la cuenta bancaria");
            }
            this.getDBTransaction().commit();
            this.executeQuery();
            mensaje = "Se guardaron los datos correctamente.";
        } catch (Exception e) {
            e.printStackTrace();
            mensaje = "Ocurrio el siguiente error: " + e.getMessage();
        }
        return mensaje;
    }

    //Método público que recibe los valores del Interfaz de Usuario para ser validados y guardados

    public String guardarBeneficiario(oracle.jbo.domain.Number pIdSolicitud, 
                                      oracle.jbo.domain.Number pIdParentesco, 
                                      String pCui, 
                                      oracle.jbo.domain.Number pRecibePago, 
                                      String pUsuario, String pNombre1, 
                                      String pNombre2, String pNombre3, 
                                      String pApellido1, String pApellido2, 
                                      Boolean cuentaValidada) {
        String registroEmpleado, mensaje;
        try {
            registroEmpleado = 
                    obtenerRegistroTrabajadorFallecido(pIdSolicitud);
            if (registroEmpleado.compareTo("-1") != 0) {
                mensaje = 
                        procesarGuardarBeneficiario(pIdSolicitud, pIdParentesco, 
                                                    pCui, pRecibePago, 
                                                    pNombre1, pNombre2, 
                                                    pNombre3, pApellido1, 
                                                    pApellido2, pUsuario, 
                                                    registroEmpleado, 
                                                    cuentaValidada);
            } else {
                mensaje = 
                        "No se pudo obtener el registro de empleado del trabajador fallecido, intente de nuevo por favor.";
            }
        } catch (Exception e) {
            e.printStackTrace();
            mensaje = "Ocurrio el siguiente error: " + e.getMessage();
        }
        return mensaje;
    }

    //Procedimiento que confirma un beneficiario

    public void confirmarBeneficiario(Number pIdBeneficiario) {
        String query = 
            "update sis_beneficiario set confirmado = 1 where id_beneficiario = " + 
            pIdBeneficiario;
        utils_DB.getEjecutarConsulta(this.getDBTransaction(), query);
        this.getDBTransaction().commit();
    }

}
