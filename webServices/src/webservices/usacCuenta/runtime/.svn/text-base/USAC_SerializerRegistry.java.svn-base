// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package webservices.usacCuenta.runtime;

import oracle.j2ee.ws.client.BasicService;
import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.encoding.soap.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class USAC_SerializerRegistry extends SerializerRegistryBase implements SerializerConstants {
    public USAC_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping11 = registry.getTypeMapping(SOAPEncodingConstants.getSOAPEncodingConstants(SOAPVersion.SOAP_11).getURIEncoding());
        TypeMapping mapping = registry.getTypeMapping("");
        {
            QName type = new QName("http://banrural.com.gt/usac/usac", "ValidaCuenta");
            CombinedSerializer serializer = new webservices.usacCuenta.runtime.ValidaCuenta_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,webservices.usacCuenta.ValidaCuenta.class, type, serializer);
        }
        {
            QName type = new QName("http://banrural.com.gt/usac/usac", "ValidaCuentaResponse");
            CombinedSerializer serializer = new webservices.usacCuenta.runtime.ValidaCuentaResponse_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,webservices.usacCuenta.ValidaCuentaResponse.class, type, serializer);
        }
        {
            QName type = new QName("http://banrural.com.gt/usac/usac", "ValidaCuentaResult");
            CombinedSerializer serializer = new LiteralFragmentSerializer(type, NOT_NULLABLE, false, null, "",false);
            registerSerializer(mapping,javax.xml.soap.SOAPElement.class, type, serializer);
        }
        webservices.usacCuenta.runtime.USAC_SerializerRegistry12 internal12Registry = new webservices.usacCuenta.runtime.USAC_SerializerRegistry12();
        return internal12Registry.getRegistry(registry);
    }
    
    private static void registerSerializer(TypeMapping mapping, Class javaType, QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
