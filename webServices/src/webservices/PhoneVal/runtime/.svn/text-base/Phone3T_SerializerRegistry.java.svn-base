// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package webservices.PhoneVal.runtime;

import oracle.j2ee.ws.client.BasicService;
import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.encoding.soap.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class Phone3T_SerializerRegistry extends SerializerRegistryBase implements SerializerConstants {
    public Phone3T_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping11 = registry.getTypeMapping(SOAPEncodingConstants.getSOAPEncodingConstants(SOAPVersion.SOAP_11).getURIEncoding());
        TypeMapping mapping = registry.getTypeMapping("");
        {
            QName type = new QName("http://webservicemart.com/ws/", "PhoneVerifyResponse");
            CombinedSerializer serializer = new webservices.PhoneVal.runtime.PhoneVerifyResponse_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,webservices.PhoneVal.PhoneVerifyResponse.class, type, serializer);
        }
        {
            QName type = new QName("http://webservicemart.com/ws/", "PhoneVerifyResult");
            CombinedSerializer serializer = new LiteralFragmentSerializer(type, NOT_NULLABLE, false, null, "",false);
            registerSerializer(mapping,javax.xml.soap.SOAPElement.class, type, serializer);
        }
        {
            QName type = new QName("http://webservicemart.com/ws/", "PhoneVerify");
            CombinedSerializer serializer = new webservices.PhoneVal.runtime.PhoneVerify_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,webservices.PhoneVal.PhoneVerify.class, type, serializer);
        }
        webservices.PhoneVal.runtime.Phone3T_SerializerRegistry12 internal12Registry = new webservices.PhoneVal.runtime.Phone3T_SerializerRegistry12();
        return internal12Registry.getRegistry(registry);
    }
    
    private static void registerSerializer(TypeMapping mapping, Class javaType, QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
