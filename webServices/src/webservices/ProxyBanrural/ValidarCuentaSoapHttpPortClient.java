// This source file is generated by Oracle tools and is subject to change
// It is a utility client for invoking the operations of the Web service port.
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package webservices.ProxyBanrural;

import java.util.Iterator;

import javax.xml.soap.SOAPElement;

import oracle.webservices.transport.ClientTransport;
import oracle.webservices.OracleStub;
import javax.xml.rpc.ServiceFactory;
import javax.xml.rpc.Stub;
import javax.xml.soap.SOAPBodyElement;

public class ValidarCuentaSoapHttpPortClient {
    private webservices.ProxyBanrural.ValidarCuenta_PortType _port;
    
    public ValidarCuentaSoapHttpPortClient() throws Exception {
        ServiceFactory factory = ServiceFactory.newInstance();
        _port = ((webservices.ProxyBanrural.ValidarCuenta_Service)factory.loadService(webservices.ProxyBanrural.ValidarCuenta_Service.class)).getValidarCuentaSoapHttpPort();
    }
    
    /**
     * @param args
     */
    public static void main(String[] args) {
        try {
            SOAPElement p;
            Iterator c;
            String b1;
            
            webservices.ProxyBanrural.ValidarCuentaSoapHttpPortClient myPort = new webservices.ProxyBanrural.ValidarCuentaSoapHttpPortClient();
            System.out.println("calling " + myPort.getEndpoint());
            // Add your own code here
            p=myPort.validaCuenta2("3334006102");
            c=p.getChildElements();
            c.hasNext();// p.toString()
             Object bodyElement=c.next();
            // a1=(SOAPElement)bodyElement;
            b1=bodyElement.toString();
 
            b1=myPort.validaCuenta("3334006102");
            
            
            
            p=myPort.validaCuentaBnrl("3334006102","A01 1084033","","","","123571113");
            c=p.getChildElements();
            SOAPElement a1;
            //SOAPBodyElement bodyElement = (SOAPBodyElement)c.next();
             bodyElement=c.next();
            c.hasNext();// p.toString()
           // a1=(SOAPElement)bodyElement;
            b1=bodyElement.toString();
      //      b1=bodyElement.getValue();
          //a1.getValue();
       //   a1.getNodeName()
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    /**
     * delegate all operations to the underlying implementation class.
     */
    
    public String validaCuenta(String numeroCuenta) throws java.rmi.RemoteException {
        return _port.validaCuenta(numeroCuenta);
    }
    
    public String getURL(String string_1) throws java.rmi.RemoteException {
        return _port.getURL(string_1);
    }
    
    public javax.xml.soap.SOAPElement validaCuenta2(String string_1) throws java.rmi.RemoteException {
        return _port.validaCuenta2(string_1);
    }
    
    public javax.xml.soap.SOAPElement validaCuentaBnrl(String string_1, String string_2, String string_3, String string_4, String string_5, String string_6) throws java.rmi.RemoteException {
        return _port.validaCuentaBnrl(string_1, string_2, string_3, string_4, string_5, string_6);
    }
    
    
    /**
     * used to access the JAX-RPC level APIs
     * returns the interface of the port instance
     */
    public webservices.ProxyBanrural.ValidarCuenta_PortType getPort() {
        return _port;
    }
    
    public String getEndpoint() {
        return (String) ((Stub) _port)._getProperty(Stub.ENDPOINT_ADDRESS_PROPERTY);
    }
    
    public void setEndpoint(String endpoint) {
        ((Stub) _port)._setProperty(Stub.ENDPOINT_ADDRESS_PROPERTY, endpoint);
    }
    
    public String getPassword() {
        return (String) ((Stub) _port)._getProperty(Stub.PASSWORD_PROPERTY);
    }
    
    public void setPassword(String password) {
        ((Stub) _port)._setProperty(Stub.PASSWORD_PROPERTY, password);
    }
    
    public String getUsername() {
        return (String) ((Stub) _port)._getProperty(Stub.USERNAME_PROPERTY);
    }
    
    public void setUsername(String username) {
        ((Stub) _port)._setProperty(Stub.USERNAME_PROPERTY, username);
    }
    
    public void setMaintainSession(boolean maintainSession) {
        ((Stub) _port)._setProperty(Stub.SESSION_MAINTAIN_PROPERTY, Boolean.valueOf(maintainSession));
    }
    
    public boolean getMaintainSession() {
        return ((Boolean) ((Stub) _port)._getProperty(Stub.SESSION_MAINTAIN_PROPERTY)).booleanValue();
    }
    
    /**
     * returns the transport context
     */
    public ClientTransport getClientTransport() {
        return ((OracleStub) _port).getClientTransport();
    }
    
}
