package interfaz_usuario.backing.gestiones_indem;

import enlace_datos.util.resulOp;

import interfaz_usuario.util.JSFUtils;
import interfaz_usuario.util.utils;

import java.util.Iterator;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;

import oracle.adf.view.faces.component.core.CoreForm;
import oracle.adf.view.faces.component.core.data.CoreTable;
import oracle.adf.view.faces.component.core.input.CoreInputHidden;
import oracle.adf.view.faces.component.core.input.CoreInputText;
import oracle.adf.view.faces.component.core.input.CoreSelectInputDate;
import oracle.adf.view.faces.component.core.input.CoreSelectOneChoice;
import oracle.adf.view.faces.component.core.layout.CorePanelBox;
import oracle.adf.view.faces.component.core.layout.CorePanelForm;
import oracle.adf.view.faces.component.core.layout.CorePanelHorizontal;
import oracle.adf.view.faces.component.core.layout.CoreShowDetailItem;
import oracle.adf.view.faces.component.core.nav.CoreCommandButton;
import oracle.adf.view.faces.component.core.nav.CoreCommandLink;
import oracle.adf.view.faces.component.core.nav.CoreCommandMenuItem;
import oracle.adf.view.faces.component.core.nav.CorePage;
import oracle.adf.view.faces.component.core.output.CoreMessages;
import oracle.adf.view.faces.component.core.output.CoreOutputFormatted;
import oracle.adf.view.faces.component.core.output.CoreOutputText;
import oracle.adf.view.faces.component.html.HtmlBody;
import oracle.adf.view.faces.component.html.HtmlHead;
import oracle.adf.view.faces.component.html.HtmlHtml;
import oracle.adf.view.faces.event.ReturnEvent;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.uicli.binding.JUCtrlValueBindingRef;

import oracle.jbo.uicli.binding.JUIteratorBinding;

import pkg_util_base_datos.interfaz_DB;


public class Indemnizacion_detalle {
    private HtmlHtml html1;
    private HtmlHead head1;
    private HtmlBody body1;
    private CoreForm form1;
    private CorePage page1;
    private CoreCommandButton cmdBtn_comprobar;
    private CoreCommandButton cmdBtn_guardar;
    private CoreCommandButton cmdBtn_guardar_calculo;
    private CoreInputText inptText_registroEmpleado;
    private CoreInputText inptText_nombreCompleto;
    private CoreSelectOneChoice slctOneChoice_tipoGestion;
    private CoreInputText inptText_nombreEstadoTrabajador;
    private CoreCommandMenuItem cmdMenuItem;
    private CoreInputText inptText_IdIndemnizacion;
    private CoreInputText inptText_Correlativo;
    private CoreInputText inptText_IdSolicitud;
    private CoreInputText inptText_EstadoExpediente;
    private CoreInputText inptText_AniosServicio;
    private CoreInputText inptText_MesesServicio;
    private CoreInputText inptText_DiasServicio;
    private CoreInputText inptText_NombreSolicitante;
    private CoreInputText inptText_CuiSolicitante;
    private CoreInputText inptText_TelefonosSolicitante;
    private CoreSelectOneChoice slctOneChoice_parentescoSol;
    private CoreInputText inptText_OtrosParentescoSol;
    private CoreTable tbl_listadoUltimosSueldos;
    private CoreInputText inptText_cuiTrabajador;
    private CoreInputText inptText_DireccionSolicitante;
    private CoreSelectOneChoice slctOneChoice_DepartamentoDirecSol;
    private CoreSelectOneChoice slctOneChoice_MunicipioDirecSol;
    private CoreInputText inptText_CorreoElectronico;
    private CoreSelectOneChoice slctOneChoice_tipoCarreraLab;
    private CoreTable tbl_listadoUltimosSueldos_calculo;
    private CoreCommandLink cdmLink_buscarEmpl;
    private CoreOutputFormatted outputFormat_importe_calculo;
    private CorePanelHorizontal pnlHoriz_mensajes_calculo;
    private CoreOutputText outputTxt_mensaje2_calculo;
    private CoreOutputFormatted outputFormat_promedio_sueldos_calculo;
    private CoreInputHidden inptHidden_promedioSueldos;
    private CoreInputHidden inptHidden_montoIndemnizacion;
    private CoreInputText inptText_IdSolicitudAutorizada;
    private CoreOutputFormatted outputFormat_cantidad_contratos_calculo;
    private CoreCommandButton cmdBtn_calcular_prestacion;
    private CoreOutputText outputTxt_mensaje_calculo;
    private CoreShowDetailItem showDetItem_calculo;
    private CoreShowDetailItem showDetItem_solicitud;
    private CoreCommandButton cmdBtn_retornar;
    private CorePanelBox pnlBox_informacionSolicitante;
    private CorePanelForm pnlForm_solicitante;
    private CorePanelHorizontal pnlHoriz_solicitante_postmortem;
    private CorePanelHorizontal pnlHoriz_solicitante_postmortemB;
    private CorePanelHorizontal pnlHoriz_solicitante_postmortemC;
    private CoreMessages messages_paso1_above;
    private CoreMessages messages_paso1_below;
    private CoreCommandButton cmdBtn_verReporteBasico;
    private CoreCommandButton cmdBtn_verReporteDARH_PM01;
    private CoreCommandLink cmdLink_trasladar_solicitud;
    private CoreCommandButton cmdBtn_retornar_calculo;
    private CoreInputText inptText_serieFacturaPost;
    private CoreInputText inptText_numeroFactPost;
    private CoreSelectInputDate slctInputDate_fechaFactPost;
    private CoreInputText inptText_nombreFunerariaPost;
    private CoreInputText inptText_montoFacturaPost;
    private CoreCommandButton cmdBtn_comprobar_gasto_funerario;
    private CoreCommandButton cmdBtn_guardar_gasto_funerario;
    private CoreCommandButton cmdBtn_retornar_gasto_funerario;
    private CoreCommandLink cmdLink_trasladar_gasto_funerario;
    private CoreCommandLink cmdLink_trasladar_calculo;
    private CoreInputHidden inptHidden_gastoFunerario;
    private CoreCommandButton cmdBtn_verReporteDARHSJI1;
    private CoreCommandButton cmdBtn_guardarRelacionLab;
    private CoreTable tbl_relacionLaboral;

    public void setHtml1(HtmlHtml html1) {
        this.html1 = html1;
    }

    public HtmlHtml getHtml1() {
        return html1;
    }

    public void setHead1(HtmlHead head1) {
        this.head1 = head1;
    }

    public HtmlHead getHead1() {
        return head1;
    }

    public void setBody1(HtmlBody body1) {
        this.body1 = body1;
    }

    public HtmlBody getBody1() {
        return body1;
    }

    public void setForm1(CoreForm form1) {
        this.form1 = form1;
    }

    public CoreForm getForm1() {
        return form1;
    }

    public void setPage1(CorePage page1) {
        this.page1 = page1;
    }

    public CorePage getPage1() {
        return page1;
    }

    //Procedimiento que muestra un mensaje en la pantalla de tipos: 1=INFO, 2=ADVERTENCIA y 3=ERROR

    private void mensaje(String messageText, int tipoAlerta) {
        FacesMessage fm = new FacesMessage(messageText);
        if (tipoAlerta == 1) {
            fm.setSeverity(FacesMessage.SEVERITY_INFO);
        } else if (tipoAlerta == 2) {
            fm.setSeverity(FacesMessage.SEVERITY_WARN);
        } else {
            fm.setSeverity(FacesMessage.SEVERITY_ERROR);
        }
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage("El control", fm);
    }

    //Función que habilita o deshabilita los campos de texto del formulario

    private void habilitar_componentes_solicitud_detallado(boolean deshabilitado) {
        this.getCdmLink_buscarEmpl().setDisabled(deshabilitado);
        this.getSlctOneChoice_tipoCarreraLab().setDisabled(deshabilitado);
        this.getInptText_AniosServicio().setDisabled(deshabilitado);
        this.getInptText_MesesServicio().setDisabled(deshabilitado);
        this.getInptText_DiasServicio().setDisabled(deshabilitado);
        this.getSlctOneChoice_tipoGestion().setDisabled(deshabilitado);
        this.getInptText_NombreSolicitante().setDisabled(deshabilitado);
        this.getInptText_CuiSolicitante().setDisabled(deshabilitado);
        this.getSlctOneChoice_parentescoSol().setDisabled(deshabilitado);
        this.getInptText_OtrosParentescoSol().setDisabled(deshabilitado);
        this.getInptText_TelefonosSolicitante().setDisabled(deshabilitado);
        this.getInptText_DireccionSolicitante().setDisabled(deshabilitado);
        this.getSlctOneChoice_DepartamentoDirecSol().setDisabled(deshabilitado);
        this.getSlctOneChoice_MunicipioDirecSol().setDisabled(deshabilitado);
        this.getInptText_CorreoElectronico().setDisabled(deshabilitado);
    }

    public void cdmLink_buscarEmpl_returnListener(ReturnEvent returnEvent) {
        String registroEmpleado;
        if (returnEvent.getReturnValue() != null) {
            registroEmpleado = returnEvent.getReturnValue().toString();
            this.getInptText_registroEmpleado().setSubmittedValue(null);
            this.getInptText_registroEmpleado().setValue(returnEvent.getReturnValue());
            interfaz_DB interfaz = new interfaz_DB();
            String consulta = 
                "select EMPL.NOMBRECOMPLETO, EMPL.ID_ESTADO, EST.NOMBRE AS ESTADO_TRABAJADOR,";
            consulta += " EMPL.CUI from SIIF.SIS_EMPLEADO_VW EMPL";
            consulta += 
                    " INNER JOIN SIIF.SIS_ESTADO EST ON EMPL.ID_ESTADO = EST.ID_ESTADO";
            consulta += " WHERE REGISTRO_EMPLEADO = " + registroEmpleado;
            Object nombreCompleto = 
                interfaz.getValorConsultaSimple("NOMBRECOMPLETO", consulta);
            Object estadoTrabajador = 
                interfaz.getValorConsultaSimple("ESTADO_TRABAJADOR", consulta);
            Object cuiTrabajador = 
                interfaz.getValorConsultaSimple("CUI", consulta);
            interfaz.cn_Cerrar_coneccion();
            if (nombreCompleto != null) {
                this.getInptText_nombreCompleto().setSubmittedValue(null);
                this.getInptText_nombreCompleto().setValue(nombreCompleto);
                this.getInptText_nombreEstadoTrabajador().setSubmittedValue(null);
                this.getInptText_nombreEstadoTrabajador().setValue(estadoTrabajador);
                this.getInptText_cuiTrabajador().setSubmittedValue(null);
                this.getInptText_cuiTrabajador().setValue(cuiTrabajador);
            } else {
                mensaje("No se pudo recuperar el nombre completo del trabajador. Intente de nuevo por favor!!", 
                        3);
            }
        }
    }

    //Prodecimiento que Despliega el Error detalladamente

    private void desplegarErrores(List pErrores) {
        int vCantidadErrores = pErrores.size();
        JboException vError;
        resulOp vResultado = new resulOp();
        for (int vContador = 0; vContador < vCantidadErrores; vContador++) {
            if (pErrores.get(vContador).getClass() == JboException.class) {
                vError = (JboException)pErrores.get(vContador);
                vResultado.setMensajeError(vError.getMessage());
                vResultado.setCodigoResultado(resulOp.OPE_ERROR);
                utils.setADFMensaje(vResultado);
            }
        }
    }

    public void setInptText_registroEmpleado(CoreInputText inptText_registroEmpleado) {
        this.inptText_registroEmpleado = inptText_registroEmpleado;
    }

    public CoreInputText getInptText_registroEmpleado() {
        return inptText_registroEmpleado;
    }

    public void setInptText_nombreCompleto(CoreInputText inptText_nombreCompleto) {
        this.inptText_nombreCompleto = inptText_nombreCompleto;
    }

    public CoreInputText getInptText_nombreCompleto() {
        return inptText_nombreCompleto;
    }

    public void setSlctOneChoice_tipoGestion(CoreSelectOneChoice slctOneChoice_tipoGestion) {
        this.slctOneChoice_tipoGestion = slctOneChoice_tipoGestion;
    }

    public CoreSelectOneChoice getSlctOneChoice_tipoGestion() {
        return slctOneChoice_tipoGestion;
    }

    public void setInptText_nombreEstadoTrabajador(CoreInputText inptText_nombreEstadoTrabajador) {
        this.inptText_nombreEstadoTrabajador = inptText_nombreEstadoTrabajador;
    }

    public CoreInputText getInptText_nombreEstadoTrabajador() {
        return inptText_nombreEstadoTrabajador;
    }

    public void setCmdMenuItem(CoreCommandMenuItem cmdMenuItem) {
        this.cmdMenuItem = cmdMenuItem;
    }

    public CoreCommandMenuItem getCmdMenuItem() {
        return cmdMenuItem;
    }

    public void setInptText_IdIndemnizacion(CoreInputText inptText_IdIndemnizacion) {
        this.inptText_IdIndemnizacion = inptText_IdIndemnizacion;
    }

    public CoreInputText getInptText_IdIndemnizacion() {
        return inptText_IdIndemnizacion;
    }

    public void setInptText_Correlativo(CoreInputText inptText_Correlativo) {
        this.inptText_Correlativo = inptText_Correlativo;
    }

    public CoreInputText getInptText_Correlativo() {
        return inptText_Correlativo;
    }

    public void setInptText_IdSolicitud(CoreInputText inptText_IdSolicitud) {
        this.inptText_IdSolicitud = inptText_IdSolicitud;
    }

    public CoreInputText getInptText_IdSolicitud() {
        return inptText_IdSolicitud;
    }

    public void setInptText_EstadoExpediente(CoreInputText inptText_EstadoExpediente) {
        this.inptText_EstadoExpediente = inptText_EstadoExpediente;
    }

    public CoreInputText getInptText_EstadoExpediente() {
        return inptText_EstadoExpediente;
    }

    public void setInptText_AniosServicio(CoreInputText inptText_AniosServicio) {
        this.inptText_AniosServicio = inptText_AniosServicio;
    }

    public CoreInputText getInptText_AniosServicio() {
        return inptText_AniosServicio;
    }

    public void setInptText_MesesServicio(CoreInputText inptText_MesesServicio) {
        this.inptText_MesesServicio = inptText_MesesServicio;
    }

    public CoreInputText getInptText_MesesServicio() {
        return inptText_MesesServicio;
    }

    public void setInptText_DiasServicio(CoreInputText inptText_DiasServicio) {
        this.inptText_DiasServicio = inptText_DiasServicio;
    }

    public CoreInputText getInptText_DiasServicio() {
        return inptText_DiasServicio;
    }

    public void setInptText_NombreSolicitante(CoreInputText inptText_NombreSolicitante) {
        this.inptText_NombreSolicitante = inptText_NombreSolicitante;
    }

    public CoreInputText getInptText_NombreSolicitante() {
        return inptText_NombreSolicitante;
    }

    public void setInptText_CuiSolicitante(CoreInputText inptText_CuiSolicitante) {
        this.inptText_CuiSolicitante = inptText_CuiSolicitante;
    }

    public CoreInputText getInptText_CuiSolicitante() {
        return inptText_CuiSolicitante;
    }

    public void setInptText_TelefonosSolicitante(CoreInputText inptText_TelefonosSolicitante) {
        this.inptText_TelefonosSolicitante = inptText_TelefonosSolicitante;
    }

    public CoreInputText getInptText_TelefonosSolicitante() {
        return inptText_TelefonosSolicitante;
    }

    public void setSlctOneChoice_parentescoSol(CoreSelectOneChoice slctOneChoice_parentescoSol) {
        this.slctOneChoice_parentescoSol = slctOneChoice_parentescoSol;
    }

    public CoreSelectOneChoice getSlctOneChoice_parentescoSol() {
        return slctOneChoice_parentescoSol;
    }

    public void setInptText_OtrosParentescoSol(CoreInputText inptText_OtrosParentescoSol) {
        this.inptText_OtrosParentescoSol = inptText_OtrosParentescoSol;
    }

    public CoreInputText getInptText_OtrosParentescoSol() {
        return inptText_OtrosParentescoSol;
    }

    public void setTbl_listadoUltimosSueldos(CoreTable tbl_listadoUltimosSueldos) {
        this.tbl_listadoUltimosSueldos = tbl_listadoUltimosSueldos;
    }

    public CoreTable getTbl_listadoUltimosSueldos() {
        return tbl_listadoUltimosSueldos;
    }

    public void setInptText_cuiTrabajador(CoreInputText inptText_cuiTrabajador) {
        this.inptText_cuiTrabajador = inptText_cuiTrabajador;
    }

    public CoreInputText getInptText_cuiTrabajador() {
        return inptText_cuiTrabajador;
    }

    public void setInptText_DireccionSolicitante(CoreInputText inptText_DireccionSolicitante) {
        this.inptText_DireccionSolicitante = inptText_DireccionSolicitante;
    }

    public CoreInputText getInptText_DireccionSolicitante() {
        return inptText_DireccionSolicitante;
    }

    public void setSlctOneChoice_DepartamentoDirecSol(CoreSelectOneChoice slctOneChoice_DepartamentoDirecSol) {
        this.slctOneChoice_DepartamentoDirecSol = 
                slctOneChoice_DepartamentoDirecSol;
    }

    public CoreSelectOneChoice getSlctOneChoice_DepartamentoDirecSol() {
        return slctOneChoice_DepartamentoDirecSol;
    }

    public void setSlctOneChoice_MunicipioDirecSol(CoreSelectOneChoice slctOneChoice_MunicipioDirecSol) {
        this.slctOneChoice_MunicipioDirecSol = slctOneChoice_MunicipioDirecSol;
    }

    public CoreSelectOneChoice getSlctOneChoice_MunicipioDirecSol() {
        return slctOneChoice_MunicipioDirecSol;
    }

    public void setInptText_CorreoElectronico(CoreInputText inptText_CorreoElectronico) {
        this.inptText_CorreoElectronico = inptText_CorreoElectronico;
    }

    public CoreInputText getInptText_CorreoElectronico() {
        return inptText_CorreoElectronico;
    }

    public void setSlctOneChoice_tipoCarreraLab(CoreSelectOneChoice slctOneChoice_tipoCarreraLab) {
        this.slctOneChoice_tipoCarreraLab = slctOneChoice_tipoCarreraLab;
    }

    public CoreSelectOneChoice getSlctOneChoice_tipoCarreraLab() {
        return slctOneChoice_tipoCarreraLab;
    }

    public void setTbl_listadoUltimosSueldos_calculo(CoreTable tbl_listadoUltimosSueldos_calculo) {
        this.tbl_listadoUltimosSueldos_calculo = 
                tbl_listadoUltimosSueldos_calculo;
    }

    public CoreTable getTbl_listadoUltimosSueldos_calculo() {
        return tbl_listadoUltimosSueldos_calculo;
    }

    public void setCdmLink_buscarEmpl(CoreCommandLink cdmLink_buscarEmpl) {
        this.cdmLink_buscarEmpl = cdmLink_buscarEmpl;
    }

    public CoreCommandLink getCdmLink_buscarEmpl() {
        return cdmLink_buscarEmpl;
    }

    public void setCmdBtn_guardar_calculo(CoreCommandButton cmdBtn_guardar_calculo) {
        this.cmdBtn_guardar_calculo = cmdBtn_guardar_calculo;
    }

    public CoreCommandButton getCmdBtn_guardar_calculo() {
        return cmdBtn_guardar_calculo;
    }

    public void setOutputFormat_importe_calculo(CoreOutputFormatted outputFormat_importe_calculo) {
        this.outputFormat_importe_calculo = outputFormat_importe_calculo;
    }

    public CoreOutputFormatted getOutputFormat_importe_calculo() {
        return outputFormat_importe_calculo;
    }

    public void setPnlHoriz_mensajes_calculo(CorePanelHorizontal pnlHoriz_mensajes_calculo) {
        this.pnlHoriz_mensajes_calculo = pnlHoriz_mensajes_calculo;
    }

    public CorePanelHorizontal getPnlHoriz_mensajes_calculo() {
        return pnlHoriz_mensajes_calculo;
    }

    public void setOutputTxt_mensaje2_calculo(CoreOutputText outputTxt_mensaje2_calculo) {
        this.outputTxt_mensaje2_calculo = outputTxt_mensaje2_calculo;
    }

    public CoreOutputText getOutputTxt_mensaje2_calculo() {
        return outputTxt_mensaje2_calculo;
    }

    public void setOutputFormat_promedio_sueldos_calculo(CoreOutputFormatted outputFormat_promedio_sueldos_calculo) {
        this.outputFormat_promedio_sueldos_calculo = 
                outputFormat_promedio_sueldos_calculo;
    }

    public CoreOutputFormatted getOutputFormat_promedio_sueldos_calculo() {
        return outputFormat_promedio_sueldos_calculo;
    }

    public void setInptHidden_promedioSueldos(CoreInputHidden inptHidden_promedioSueldos) {
        this.inptHidden_promedioSueldos = inptHidden_promedioSueldos;
    }

    public CoreInputHidden getInptHidden_promedioSueldos() {
        return inptHidden_promedioSueldos;
    }

    public void setInptHidden_montoIndemnizacion(CoreInputHidden inptHidden_montoIndemnizacion) {
        this.inptHidden_montoIndemnizacion = inptHidden_montoIndemnizacion;
    }

    public CoreInputHidden getInptHidden_montoIndemnizacion() {
        return inptHidden_montoIndemnizacion;
    }

    public void setCmdBtn_comprobar(CoreCommandButton cmdBtn_comprobar) {
        this.cmdBtn_comprobar = cmdBtn_comprobar;
    }

    public CoreCommandButton getCmdBtn_comprobar() {
        return cmdBtn_comprobar;
    }

    public void setCmdBtn_guardar(CoreCommandButton cmdBtn_guardar) {
        this.cmdBtn_guardar = cmdBtn_guardar;
    }

    public CoreCommandButton getCmdBtn_guardar() {
        return cmdBtn_guardar;
    }

    /*public void setCmdBtn_cancelar(CoreCommandButton cmdBtn_cancelar) {
        this.cmdBtn_cancelar = cmdBtn_cancelar;
    }

    public CoreCommandButton getCmdBtn_cancelar() {
        return cmdBtn_cancelar;
    }*/

    //Procedimiento que comprueba los campos de texto del solicitante de las prestaciones post

    private boolean comprobarCamposDeTexto_solicitante() {
        boolean valido = false;
        Object nombreSolicitante, cuiSolicitante, idParentescoSol, otroParentescoSol, direccionSol, telefonosSol;
        FacesContext f = FacesContext.getCurrentInstance();
        String nombreBinding = "#{bindings.IdParentescoSol.inputValue}";
        nombreSolicitante = this.getInptText_NombreSolicitante().getValue();
        if (nombreSolicitante != null) {
            nombreSolicitante = nombreSolicitante.toString().trim();
            this.getInptText_NombreSolicitante().setValue(nombreSolicitante);
        }
        cuiSolicitante = this.getInptText_CuiSolicitante().getValue();
        if (cuiSolicitante != null) {
            cuiSolicitante = cuiSolicitante.toString().trim();
            this.getInptText_CuiSolicitante().setValue(cuiSolicitante);
        }
        idParentescoSol = JSFUtils.resolveExpression(f, nombreBinding);
        otroParentescoSol = this.getInptText_OtrosParentescoSol().getValue();
        if (otroParentescoSol != null) {
            otroParentescoSol = otroParentescoSol.toString().trim();
            this.getInptText_OtrosParentescoSol().setValue(otroParentescoSol);
        }
        direccionSol = this.getInptText_DireccionSolicitante().getValue();
        if (direccionSol != null) {
            direccionSol = direccionSol.toString().trim();
            this.getInptText_DireccionSolicitante().setValue(direccionSol);
        }
        telefonosSol = this.getInptText_TelefonosSolicitante().getValue();
        if (telefonosSol != null) {
            telefonosSol = telefonosSol.toString().trim();
            this.getInptText_TelefonosSolicitante().setValue(telefonosSol);
        }
        if (nombreSolicitante == null) {
            mensaje("Ingrese el nombre del solicitante por favor!!", 3);
        } else if (cuiSolicitante == null) {
            mensaje("Ingrese el CUI del solicitante por favor!!", 3);
        } else if (cuiSolicitante.toString().length() != 13) {
            mensaje("Ingrese los 13 dígitos del CUI del solicitante por favor!!", 
                    3);
        } else if (idParentescoSol == null) {
            mensaje("Seleccione un parentesco del solicitante por favor!!", 3);
        } else if (idParentescoSol.toString().compareToIgnoreCase("9") == 0 && 
                   otroParentescoSol == null) {
            mensaje("Ingrese el parentesco del solicitante por favor!!", 3);
        } else if (direccionSol == null) {
            mensaje("Ingrese dirección del solicitante por favor!!", 3);
        } else if (telefonosSol == null) {
            mensaje("Ingrese Teléfono(s) del Solicitante por favor!!", 3);
        } else {
            valido = true;
        }
        return valido;
    }

    //Realiza una comprobación básica del formulario

    private boolean comprobarCamposDeTexto_solicitud() {
        boolean valido = false;
        Object tipoCarreraLaboral, aniosServicio, mesesServicio, diasServicio, tipoGestion;
        tipoCarreraLaboral = this.getSlctOneChoice_tipoCarreraLab().getValue();
        aniosServicio = this.getInptText_AniosServicio().getValue();
        if (aniosServicio != null) {
            aniosServicio = aniosServicio.toString().trim();
            this.getInptText_AniosServicio().setValue(aniosServicio);
        }
        mesesServicio = this.getInptText_MesesServicio().getValue();
        if (mesesServicio != null) {
            mesesServicio = mesesServicio.toString().trim();
            this.getInptText_MesesServicio().setValue(mesesServicio);
        }
        diasServicio = this.getInptText_DiasServicio().getValue();
        if (diasServicio != null) {
            diasServicio = diasServicio.toString().trim();
            this.getInptText_DiasServicio().setValue(diasServicio);
        }
        tipoGestion = this.getSlctOneChoice_tipoGestion().getValue();
        if (tipoCarreraLaboral == null) {
            mensaje("Seleccione un Tipo de Carrera Laboral para continuar, por favor!!", 
                    3);
        } else if (aniosServicio == null) {
            mensaje("Ingrese los Años de Servicio para continuar, por favor!!", 
                    3);
        } else if (mesesServicio == null) {
            mensaje("Ingrese los Meses de Servicio para continuar, por favor!!", 
                    3);
        } else if (Integer.parseInt(mesesServicio.toString()) > 11) {
            mensaje("Los Meses de Servicio debe ser menor o igual de 11", 3);
        } else if (diasServicio == null) {
            mensaje("Ingrese los Días de Servicio para continuar, por favor!!", 
                    3);
        } else if (Integer.parseInt(diasServicio.toString()) > 30) {
            mensaje("Los Días de Servicio debe ser menor o igual de 30", 3);
        } else if (tipoGestion == null) {
            mensaje("Seleccione un Tipo de Gestión para continuar, por favor!!", 
                    3);
        } else if (tipoGestion.toString().compareToIgnoreCase("1") == 0) {
            valido = comprobarCamposDeTexto_solicitante();
        } else {
            valido = true;
        }
        return valido;
    }

    //Comprueba si un trabajador ya falleció

    private boolean comprobarFallecimientoTrabajador(FacesContext f) {
        boolean correcto = false;
        Object aux = 
            JSFUtils.EjecutarAcccion(f, "ComprobarTrabajadorFallecido");
        if (aux != null) {
            int resultado = Integer.parseInt(aux.toString());
            if (resultado >= 1) {
                correcto = true;
            } else {
                mensaje("El trabajador no está fallecido, verifique por favor!!", 
                        3);
            }
        } else {
            mensaje("Error al intentar verificar si el trabajador esta fallecido o no, intente de nuevo por favor!!", 
                    3);
        }
        return correcto;
    }

    //Habilita o deshabilita componentes del formulario al comprobar, guardar o cancelar una solicitud

    private void habilitar_componentes_solicitud(boolean deshabilitado) {
        this.getShowDetItem_calculo().setDisabled(deshabilitado);
        this.getCmdBtn_comprobar().setDisabled(deshabilitado);
        this.getCmdBtn_guardar().setDisabled(!deshabilitado);
        this.getCmdBtn_verReporteBasico().setDisabled(deshabilitado);
        this.getCmdBtn_verReporteDARH_PM01().setDisabled(deshabilitado);
        this.getCmdLink_trasladar_solicitud().setDisabled(deshabilitado);
        habilitar_componentes_solicitud_detallado(deshabilitado); //Campos de Texto y Combos
    }

    //comprueba información para prestaciones postmortem

    private void comprobar_prestacion_postmortem(FacesContext f) {
        if (comprobarFallecimientoTrabajador(f)) {
            mensaje("Información Comprobada Correctamente!!", 1);
            habilitar_componentes_solicitud(true);
        }
    }

    //Comprueba si un trabajador ya se retiró de la institución

    private boolean comprobarRetiroTrabajador(FacesContext f) {
        boolean correcto = false;
        Object aux = 
            JSFUtils.EjecutarAcccion(f, "ComprobarTrabajadorRetirado");
        if (aux != null) {
            int resultado = Integer.parseInt(aux.toString());
            if (resultado >= 1) {
                correcto = true;
            } else {
                mensaje("El trabajador no se ha retirado aún, verifique por favor!!", 
                        3);
            }
        } else {
            mensaje("Error al intentar verificar si el trabajador esta retirado o no, intente de nuevo por favor!!", 
                    3);
        }
        return correcto;
    }

    //comprueba información para indemnización por retiro

    private void comprobar_indemnizacon_retiro(FacesContext f) {
        if (comprobarRetiroTrabajador(f)) {
            mensaje("Información Comprobada Correctamente!!", 1);
            habilitar_componentes_solicitud(true);
        }
    }

    public String cmdBtn_comprobar_action() {
        Object tipoGestion;
        FacesContext f = FacesContext.getCurrentInstance();
        String nombreBinding = "#{bindings.IdTipoIndemnizacion.inputValue}";
        if (comprobarCamposDeTexto_solicitud()) {
            tipoGestion = JSFUtils.resolveExpression(f, nombreBinding);
            if (tipoGestion.toString().compareTo("1") == 0) {
                comprobar_indemnizacon_retiro(f);
            } else {
                comprobar_prestacion_postmortem(f);
            }
        }
        return null;
    }

    //Función que obtiene el último correlativo de SIS_INDEMNIZACIÓN del año actual

    private long obtenerUltimoCorrelativo_solicitud(String anioActual) {
        long correlativoExpediente = 0;
        interfaz_DB interfaz = new interfaz_DB();
        Object varId = 
            interfaz.getValorConsultaSimple("valor", "Select max(CORRELATIVO_ANIO) as valor from siif.SIS_INDEMNIZACION where ANIO_ACTUAL = " + 
                                            anioActual);
        interfaz.cn_Cerrar_coneccion();
        if (varId != null) {
            correlativoExpediente = Long.valueOf(varId.toString());
        }
        return correlativoExpediente;
    }

    //Procedimiento que obtiene el ID de la solicitud autorizada de retiro definitivo o fallecimiento y lo setea al registro actual

    private boolean obtenerId_solicitudAutorizada(FacesContext f, 
                                                  String metodo, String b1, 
                                                  String b2) {
        boolean correcto = false;
        try {
            List errors = JSFUtils.EjecutarAcccion3(f, metodo);
            if (errors.size() == 0) {
                //No hubo errores y el resultado se guardó en una variable auxiliar
                Object aux = JSFUtils.resolveExpression(f, b1);
                if (aux != null && Integer.parseInt(aux.toString()) > 0) {
                    JSFUtils.setExpressionValue(f, b2, 
                                                utils.getNumberOracle(aux));
                    correcto = true;
                } else {
                    mensaje("Error al intentar obtener el ID de la solicitud autorizada, intente de nuevo por favor!!", 
                            3);
                }
            } else {
                mensaje("Error al intentar obtener el ID de la solicitud autorizada del trabajador, intente de nuevo por favor!!", 
                        3);
                desplegarErrores(errors);
            }
        } catch (Exception e) {
            e.printStackTrace();
            mensaje("Ha ocurrido el siguiente error: " + e.getMessage(), 3);
        }
        return correcto;
    }

    //Procedimiento que rellena los campos pendientes de una solicitud nueva antes de grabar.

    private boolean rellenarCamposPendientes_solicitudNueva(FacesContext f) {
        boolean correcto = false;
        String b1 = "#{bindings.AnioActual.inputValue}";
        String b2 = "#{bindings.CorrelativoAnio.inputValue}";
        String b3 = "#{bindings.IdEstado.inputValue}";
        String b4 = "#{bindings.IdTipoIndemnizacion.inputValue}";
        String b5 = "#{bindings.IdSolicitudAutorizadaRetiro.inputValue}";
        String b6 = "#{bindings.IdSolicitudAutorizadaFallec.inputValue}";
        String b7 = "#{bindings.IdSolicitudAutorizada.inputValue}";
        String b8 = "ObtenerIDSolicitudAutorizadaRetiro";
        String b9 = "ObtenerIDSolicitudAutorizadaFallecimiento";
        try {
            Number anioActual = utils.getNumberOracle(utils.getAnioActual());
            //System.out.println("El año actual es: " + anioActual);
            //obtenemos el correlativo de la solicitud dependiendo del año actual
            long corr = 
                obtenerUltimoCorrelativo_solicitud(utils.getAnioActual()) + 1;
            JSFUtils.setExpressionValue(f, b1, anioActual);
            JSFUtils.setExpressionValue(f, b2, utils.getNumberOracle(corr));
            JSFUtils.setExpressionValue(f, b3, utils.getNumberOracle("250"));
            Object tipo = JSFUtils.resolveExpression(f, b4); //Tipo de Gestión
            if (tipo != null) {
                if (Integer.parseInt(tipo.toString()) == 1) {
                    //indemnizacion por retiro definitivo
                    correcto = obtenerId_solicitudAutorizada(f, b8, b5, b7);
                } else { //prestaciones post-mortem
                    correcto = obtenerId_solicitudAutorizada(f, b9, b6, b7);
                }
            } else {
                mensaje("No se pudo obtener el tipo de gestión, intente de nuevo por favor!!", 
                        3);
            }
        } catch (Exception e) {
            e.printStackTrace();
            mensaje("Ha ocurrido el siguiente error: " + e.getMessage(), 3);
        }
        return correcto;
    }

    //Función que realiza el commit a la base de Datos

    private boolean commit(FacesContext f) {
        boolean correcto = false;
        OperationBinding operationBinding;
        BindingContainer cont = 
            (BindingContainer)JSFUtils.resolveExpression(f, "#{bindings}");
        operationBinding = cont.getOperationBinding("Confirmar");
        operationBinding.execute(); //Ejecutamos el Commit
        if (operationBinding.getErrors().isEmpty()) {
            correcto = true;
        } else { //Hubo error al ejecutar el Commit
            mensaje("No se pudo grabar porque ocurrió un error inesperado. Intente de nuevo por favor!!", 
                    3);
            desplegarErrores(operationBinding.getErrors()); //Despliega el detalle de los errores
            operationBinding = cont.getOperationBinding("Rollback");
            operationBinding.execute();
        }
        return correcto;
    }

    //Procedimiento que rellena los campos pendientes de una solicitud existente antes de grabar.

    private boolean rellenarCamposPendientes_solicitudExistente(FacesContext f) {
        boolean correcto = false;
        String b1 = "#{bindings.IdTipoIndemnizacion.inputValue}";
        String b2 = "#{bindings.IdSolicitudAutorizadaRetiro.inputValue}";
        String b3 = "#{bindings.IdSolicitudAutorizadaFallec.inputValue}";
        String b4 = "#{bindings.IdSolicitudAutorizada.inputValue}";
        String b5 = "ObtenerIDSolicitudAutorizadaRetiro";
        String b6 = "ObtenerIDSolicitudAutorizadaFallecimiento";
        try {
            Object tipo = JSFUtils.resolveExpression(f, b1);
            if (tipo != null) {
                if (Integer.parseInt(tipo.toString()) == 1) {
                    //indemnizacion por retiro definitivo
                    correcto = obtenerId_solicitudAutorizada(f, b5, b2, b4);
                } else { //prestaciones post-mortem
                    correcto = obtenerId_solicitudAutorizada(f, b6, b3, b4);
                }
            } else {
                mensaje("No se pudo obtener el tipo de gestión, intente de nuevo por favor!!", 
                        3);
            }
        } catch (Exception e) {
            e.printStackTrace();
            mensaje("Ha ocurrido el siguiente error: " + e.getMessage(), 3);
        }
        return correcto;
    }

    //Procedimiento que guarda la solicitud ingresada a la base de datos

    private boolean procesar_guardar_solicitud(String binding, 
                                               FacesContext f) {
        boolean exito = false;
        Object aux = JSFUtils.resolveExpression(f, binding);
        if (aux != null) {
            boolean esNueva = Boolean.parseBoolean(aux.toString());
            if (esNueva) { //Solicitud Nueva
                if (rellenarCamposPendientes_solicitudNueva(f)) {
                    exito = commit(f);
                }
            } else { //Solicitud existente
                if (rellenarCamposPendientes_solicitudExistente(f)) {
                    exito = commit(f);
                }
            }
        } else {
            mensaje("Error al determinar si la solicitud es nueva o no, intente de nuevo por favor!!", 
                    3);
        }
        return exito;
    }

    public String cmdBtn_guardar_action() {
        String binding = "#{bindings.EsSolicitudNueva.inputValue}";
        FacesContext f = FacesContext.getCurrentInstance();
        ;
        if (procesar_guardar_solicitud(binding, f)) {
            mensaje("Solicitud Grabada Correctamente.", 1);
            habilitar_componentes_solicitud(false);
            JSFUtils.setExpressionValue(f, binding, 
                                        Boolean.parseBoolean("false"));
            JSFUtils.EjecutarAcccion(f, "RefrescarIndemnizacion");
        }
        return "ir_a_listado_indemnizaciones";
    }

    public String cmdBtn_cancelar_action() {
        FacesContext f = FacesContext.getCurrentInstance();
        Object aux = 
            JSFUtils.resolveExpression(f, "#{bindings.EsSolicitudNueva.inputValue}");
        if (aux != null && Boolean.parseBoolean(aux.toString()) == true) {
            //Es solicitud nueva
            JSFUtils.EjecutarAcccion(f, "Crear");
            JSFUtils.EjecutarAcccion(f, "RecuperarMunicipio");
        } else { //Es existente
            JSFUtils.EjecutarAcccion(f, "RecuperarIndemnizacion");
            JSFUtils.EjecutarAcccion(f, "RefrescarIndemnizacion");
        }
        habilitar_componentes_solicitud(false);
        mensaje("Procedimiento cancelado correctamente.", 1);
        return null;
    }

    public String cmdBtn_retornar_action() {
        return "ir_a_listado_indemnizaciones";
    }

    public void setInptText_IdSolicitudAutorizada(CoreInputText inptText_IdSolicitudAutorizada) {
        this.inptText_IdSolicitudAutorizada = inptText_IdSolicitudAutorizada;
    }

    public CoreInputText getInptText_IdSolicitudAutorizada() {
        return inptText_IdSolicitudAutorizada;
    }

    //Habilita o deshabilita componentes del formulario al calcular, guardar o cancelar el cálculo

    private void habilitar_componentes_calculo(boolean deshabilitado) {
        this.getShowDetItem_solicitud().setDisabled(deshabilitado);
        this.getCmdBtn_calcular_prestacion().setDisabled(deshabilitado);
        this.getCmdBtn_guardar_calculo().setDisabled(!deshabilitado);
        this.getCmdLink_trasladar_calculo().setDisabled(deshabilitado);
    }

    private void calcular_indemnizacion_detallado(int anios, int meses, 
                                                  int dias, 
                                                  Double sueldoProm) {
        Double indemnizacion = null;
        if (anios >= 20) {
            indemnizacion = sueldoProm * 12;
        } else if (anios >= 10) {
            indemnizacion = sueldoProm * 10;
        } else {
            indemnizacion = (sueldoProm * anios);
            indemnizacion += (sueldoProm * (meses * 100 / 12) / 100);
            indemnizacion += (sueldoProm * (dias * 100 / 365) / 100);
        }
        //Se guardan los resultados en controles ocultos
        this.getInptHidden_promedioSueldos().setValue(sueldoProm);
        this.getInptHidden_montoIndemnizacion().setValue(indemnizacion);
        habilitar_componentes_calculo(true);
        mensaje("Cálculo de indemnización por retiro definitivo realizado correctamente.", 
                1);
    }

    //Calcula la indemnización por retiro definitivo

    private void calcular_indemnizacion_retiro(int anios, int meses, int dias, 
                                               FacesContext f) {
        Object aux = JSFUtils.EjecutarAcccion(f, "ObtenerPromedioSueldos");
        if (aux != null && Double.parseDouble(aux.toString()) > 0) {
            Double sueldoPromedio = Double.parseDouble(aux.toString());
            calcular_indemnizacion_detallado(anios, meses, dias, 
                                             sueldoPromedio);
        } else {
            mensaje("No se pudo obtener el sueldo promedio del trabajador.", 
                    3);
        }
    }

    //Procedimiento que calcula la prestación detalladamente

    private void calcular_prestaciones_post_detallado(int anios, int meses, 
                                                      int dias, String descr, 
                                                      Double sueldoPr) {
        Double postMortem = null;
        if (anios >= 20) {
            postMortem = sueldoPr * 12;
        } else if (anios >= 10) {
            postMortem = sueldoPr * 10;
        } else {
            postMortem = (sueldoPr * anios);
            postMortem += (sueldoPr * (meses * 100 / 12) / 100);
            postMortem += (sueldoPr * (dias * 100 / 365) / 100);
        }
        this.getOutputTxt_mensaje_calculo().setValue(descr);
        this.getPnlHoriz_mensajes_calculo().setRendered(true);
        //Se guardan los resultados en controles ocultos
        this.getInptHidden_promedioSueldos().setValue(sueldoPr);
        this.getInptHidden_montoIndemnizacion().setValue(postMortem);
        habilitar_componentes_calculo(true);
        mensaje("Cálculo de prestación post-mortem realizado correctamente.", 
                1);
    }


    //Calcula las presticiones post-mortem

    private void calcular_prestaciones_post(int anios, int meses, int dias, 
                                            FacesContext f) {
        String b1 = "ObtenerNumContratosFinalizadorTrab";
        String b2 = "ObtenerContratosTrabajadorFallecido";
        Object aux = JSFUtils.EjecutarAcccion(f, b1);
        if (aux != null && Integer.parseInt(aux.toString()) > 0) {
            String mensaje = "Cantidad de contratos finalizados o dados ";
            mensaje += "de baja al momento del fallecimiento: " + aux;
            Object cont = JSFUtils.EjecutarAcccion(f, b2);
            if (cont != null && cont.toString().compareTo("") != 0) {
                mensaje += " (" + cont.toString() + ")";
            }
            aux = JSFUtils.EjecutarAcccion(f, "ObtenerPromedioSueldos");
            if (aux != null && Double.parseDouble(aux.toString()) > 0) {
                Double sueldoPromedio = Double.parseDouble(aux.toString());
                calcular_prestaciones_post_detallado(anios, meses, dias, 
                                                     mensaje, sueldoPromedio);
            } else {
                mensaje("No se pudo obtener el sueldo promedio del trabajador.", 
                        3);
            }
        } else {
            mensaje("No hay contratos finalizados o dados de baja al momento del fallecimiento del trabajador.", 
                    3);
        }
    }

    //Calcula el importe total de la Indemnización o Prestaciones Postmortem

    private void calcular_prestaciones(int anios, int meses, int dias) {
        String b1 = "#{bindings.IdTipoIndemnizacion.inputValue}";
        FacesContext f = FacesContext.getCurrentInstance();
        try {
            Object tipo = JSFUtils.resolveExpression(f, b1);
            if (tipo != null) {
                if (Integer.parseInt(tipo.toString()) == 1) {
                    //indemnizacion por retiro definitivo
                    calcular_indemnizacion_retiro(anios, meses, dias, f);
                } else { //prestaciones post-mortem
                    calcular_prestaciones_post(anios, meses, dias, f);
                }
            } else {
                mensaje("No se pudo obtener el tipo de gestión!!", 3);
            }
        } catch (Exception e) {
            e.printStackTrace();
            mensaje("Ocurrió el siguiente error: " + e.getMessage(), 3);
        }
    }

    public String cmdBtn_calcular_action() {
        String b1 = "#{bindings.AniosTiempoServicio.inputValue}";
        String b2 = "#{bindings.MesesTiempoServicio.inputValue}";
        String b3 = "#{bindings.DiasTiempoServicio.inputValue}";
        FacesContext f = FacesContext.getCurrentInstance();
        Object aniosObj = JSFUtils.resolveExpression(f, b1);
        Object mesesObj = JSFUtils.resolveExpression(f, b2);
        Object diasObj = JSFUtils.resolveExpression(f, b3);
        if (aniosObj != null && mesesObj != null && diasObj != null) {
            int anios = Integer.valueOf(aniosObj.toString()).intValue();
            int meses = Integer.valueOf(mesesObj.toString()).intValue();
            int dias = Integer.valueOf(diasObj.toString()).intValue();
            calcular_prestaciones(anios, meses, dias);
        } else {
            mensaje("No se pudo obtener el tiempo de servicio del trabajador. Intente de nuevo por favor!!", 
                    3);
        }
        return null;
    }

    //Rellena campos pendientes antes de guardar el cálculo

    private void rellenarCamposPendientes_guardar_calculo(FacesContext f) {
        Number aux;
        String b1 = "#{bindings.SueldoPromedio.inputValue}";
        String b2 = "#{bindings.PostMortem.inputValue}";
        String b3 = "#{bindings.TotalPrestacion.inputValue}";
        Object suelObj = this.getInptHidden_promedioSueldos().getValue();
        if (suelObj != null) {
            aux = utils.getNumberOracle(String.format("%.2f", suelObj));
            JSFUtils.setExpressionValue(f, b1, aux);
        }
        Object totalObj = this.getInptHidden_montoIndemnizacion().getValue();
        if (totalObj != null) {
            aux = utils.getNumberOracle(String.format("%.2f", totalObj));
            JSFUtils.setExpressionValue(f, b2, aux);
            JSFUtils.setExpressionValue(f, b3, aux);
        }
    }

    //Procesa el guardar cálculo

    private void procesar_guardar_calculo() {
        FacesContext f = FacesContext.getCurrentInstance();
        rellenarCamposPendientes_guardar_calculo(f);
        if (commit(f)) {
            mensaje("Información grabada correctamente.", 1);
            habilitar_componentes_calculo(false);
            JSFUtils.EjecutarAcccion(f, "RefrescarIndemnizacion");
        }
    }

    public String cmdBtn_guardar_calculo_action() {
        procesar_guardar_calculo();
        return null;
    }

    //Realiza una comprobación básica del formulario

    private boolean comprobarCamposDeTexto_gastoFunerario() {
        boolean valido = false;
        Object serieFactura, numeroFactura, fechaFactura, nombreFuneraria, montoFactura;
        serieFactura = this.getInptText_serieFacturaPost().getValue();
        if (serieFactura != null) {
            serieFactura = serieFactura.toString().trim();
            this.getInptText_serieFacturaPost().setValue(serieFactura);
        }
        numeroFactura = this.getInptText_numeroFactPost().getValue();
        if (numeroFactura != null) {
            numeroFactura = numeroFactura.toString().trim();
            this.getInptText_numeroFactPost().setValue(numeroFactura);
        }
        fechaFactura = this.getSlctInputDate_fechaFactPost().getValue();
        if (fechaFactura != null) {
            fechaFactura = fechaFactura.toString().trim();
        }
        nombreFuneraria = this.getInptText_nombreFunerariaPost().getValue();
        if (nombreFuneraria != null) {
            nombreFuneraria = nombreFuneraria.toString().trim();
            this.getInptText_nombreFunerariaPost().setValue(nombreFuneraria);
        }
        montoFactura = this.getInptText_montoFacturaPost().getValue();
        //System.out.println("hola2");
        if (montoFactura != null) {
            //System.out.println("hola");
            montoFactura = montoFactura.toString().trim();
            this.getInptText_montoFacturaPost().setValue(montoFactura);
        }
        if (serieFactura == null) {
            mensaje("Ingrese la serie de la factura para para continuar por favor!!", 
                    3);
        } else if (numeroFactura == null) {
            mensaje("Ingrese el número de factura para continuar por favor!!", 
                    3);
        } else if (fechaFactura == null) {
            mensaje("Ingrese la fecha de la factura para continuar por favor!!", 
                    3);
        } else if (nombreFuneraria == null) {
            mensaje("Ingrese el nombre de la funeraria para continuar por favor!!", 
                    3);
        } else if (montoFactura == null) {
            mensaje("Ingrese el monto de la factura para continuar por favor!!", 
                    3);
        } else {
            valido = true;
        }
        return valido;
    }

    //Habilita o deshabilita componentes del formulario al comprobar, guardar o cancelar el gasto funerario

    private void habilitar_componentes_gasto_funerario(boolean deshabilitado) {
        this.getShowDetItem_solicitud().setDisabled(deshabilitado);
        this.getShowDetItem_calculo().setDisabled(deshabilitado);
        this.getCmdBtn_comprobar_gasto_funerario().setDisabled(deshabilitado);
        this.getCmdBtn_guardar_gasto_funerario().setDisabled(!deshabilitado);
        this.getCmdLink_trasladar_gasto_funerario().setDisabled(deshabilitado);
    }

    //Comprueba los valores ingresados del gasto funerario detalladamente

    private void comprobar_gasto_funerario_detallado(FacesContext f, 
                                                     double montoFactura, 
                                                     double montoMaximo) {
        double totalPrest;
        String b = "#{bindings.PostMortem.inputValue}";
        //String b2 = "#{bindings.GastoFunerario.inputValue}";
        //String b3 = "#{bindings.TotalPrestacion.inputValue}";
        //Number n1 = utils.getNumberOracle(String.format("%.2f", montoFactura));
        //Number n2 = utils.getNumberOracle(String.format("%.2f", montoMaximo));
        Object postM = JSFUtils.resolveExpression(f, b);
        if (montoFactura <= montoMaximo) {
            //JSFUtils.setExpressionValue(f, b2, n1);
            this.getInptHidden_gastoFunerario().setValue(montoFactura);
            totalPrest = montoFactura + Double.parseDouble(postM.toString());
        } else { //El gasto funerario será el monto máximo a cubrir
            //JSFUtils.setExpressionValue(f, b2, n2);
            this.getInptHidden_gastoFunerario().setValue(montoMaximo);
            totalPrest = montoMaximo + Double.parseDouble(postM.toString());
        }
        //Number n3 = utils.getNumberOracle(totalPrest);
        //JSFUtils.setExpressionValue(f, b3, n3);
        this.getInptHidden_montoIndemnizacion().setValue(totalPrest);
        mensaje("Gasto funerario comprobado con éxito", 1);
        if (montoFactura > montoMaximo) {
            Number n = utils.getNumberOracleFormato(montoMaximo);
            mensaje("El monto máximo a cubrir va a ser de: Q." + n, 1);
        }
        habilitar_componentes_gasto_funerario(true);
        JSFUtils.EjecutarAcccion(f, "RefrescarIndemnizacion");
    }

    //Comprueba los valores ingresado del gasto funerario

    private void comprobar_gasto_funerario() {
        String b1 = "#{bindings.SueldoPromedio.inputValue}";
        String b2 = "#{bindings.MontoFacturaPost.inputValue}";
        FacesContext f = FacesContext.getCurrentInstance();
        Object aux = JSFUtils.resolveExpression(f, b1);
        if (aux != null && Double.parseDouble(aux.toString()) > 0) {
            double sueldoProm = Double.parseDouble(aux.toString());
            double montoMax = sueldoProm - 412.50;
            if (montoMax > 0) { //Se determinó el monto máximo a cubrir
                aux = JSFUtils.resolveExpression(f, b2); //monto de la factura
                if (aux != null && Double.parseDouble(aux.toString()) >= 160) {
                    double montoFact = Double.parseDouble(aux.toString());
                    comprobar_gasto_funerario_detallado(f, montoFact, 
                                                        montoMax);
                } else {
                    mensaje("El monto de la factura del gasto funerario debe ser de al menos de Q160.00.", 
                            3);
                }
            } else {
                mensaje("El monto máximo a cubrir dió resultado 0 o negativo, verifique por favor.", 
                        3);
            }
        } else {
            mensaje("Calcule primeramente el sueldo promedio para continuar por favor.", 
                    3);
        }
    }

    public String cmdBtn_comprobar_gasto_funerario_action() {
        if (comprobarCamposDeTexto_gastoFunerario()) {
            comprobar_gasto_funerario();
        }
        return null;
    }

    //Rellena campos pendientes antes de guardar el gasto funerario

    private void rellenarCamposPendientes_guardar_gasto_fun(FacesContext f) {
        Number aux;
        String b1 = "#{bindings.GastoFunerario.inputValue}";
        String b2 = "#{bindings.TotalPrestacion.inputValue}";
        Object gastoFunObj = this.getInptHidden_gastoFunerario().getValue();
        if (gastoFunObj != null) {
            aux = utils.getNumberOracle(String.format("%.2f", gastoFunObj));
            JSFUtils.setExpressionValue(f, b1, aux);
        }
        Object totalObj = this.getInptHidden_montoIndemnizacion().getValue();
        if (totalObj != null) {
            aux = utils.getNumberOracle(String.format("%.2f", totalObj));
            JSFUtils.setExpressionValue(f, b2, aux);
        }
    }

    //Procesa el guardar gasto funerario.

    private void procesar_guardar_gasto_funerario() {
        FacesContext f = FacesContext.getCurrentInstance();
        rellenarCamposPendientes_guardar_gasto_fun(f);
        if (commit(f)) {
            mensaje("Información grabada correctamente.", 1);
            habilitar_componentes_gasto_funerario(false);
            JSFUtils.EjecutarAcccion(f, "RefrescarIndemnizacion");
        }
    }

    public String cmdBtn_guardar_gasto_funerario_action() {
        procesar_guardar_gasto_funerario();
        return null;
    }

    public void setOutputFormat_cantidad_contratos_calculo(CoreOutputFormatted outputFormat_cantidad_contratos_calculo) {
        this.outputFormat_cantidad_contratos_calculo = 
                outputFormat_cantidad_contratos_calculo;
    }

    public CoreOutputFormatted getOutputFormat_cantidad_contratos_calculo() {
        return outputFormat_cantidad_contratos_calculo;
    }

    public void setCmdBtn_calcular_prestacion(CoreCommandButton cmdBtn_calcular_prestacion) {
        this.cmdBtn_calcular_prestacion = cmdBtn_calcular_prestacion;
    }

    public CoreCommandButton getCmdBtn_calcular_prestacion() {
        return cmdBtn_calcular_prestacion;
    }

    public void setOutputTxt_mensaje_calculo(CoreOutputText outputTxt_mensaje_calculo) {
        this.outputTxt_mensaje_calculo = outputTxt_mensaje_calculo;
    }

    public CoreOutputText getOutputTxt_mensaje_calculo() {
        return outputTxt_mensaje_calculo;
    }

    public void setShowDetItem_calculo(CoreShowDetailItem showDetItem_calculo) {
        this.showDetItem_calculo = showDetItem_calculo;
    }

    public CoreShowDetailItem getShowDetItem_calculo() {
        return showDetItem_calculo;
    }

    public void setShowDetItem_solicitud(CoreShowDetailItem showDetItem_solicitud) {
        this.showDetItem_solicitud = showDetItem_solicitud;
    }

    public CoreShowDetailItem getShowDetItem_solicitud() {
        return showDetItem_solicitud;
    }

    public String cmdBtn_cancelar_calculo_action() {
        FacesContext f = FacesContext.getCurrentInstance();
        //Reseteamos y ocultamos los mensajes
        this.getOutputTxt_mensaje_calculo().setValue(null);
        this.getInptHidden_promedioSueldos().setValue(null);
        this.getInptHidden_montoIndemnizacion().setValue(null);
        this.getPnlHoriz_mensajes_calculo().setRendered(false);
        JSFUtils.EjecutarAcccion(f, "RecuperarIndemnizacion");
        JSFUtils.EjecutarAcccion(f, "RefrescarIndemnizacion");
        habilitar_componentes_calculo(false);
        mensaje("Se cancelaron los cambios no guardados correctamente.", 1);
        return null;
    }

    public void setCmdBtn_retornar(CoreCommandButton cmdBtn_retornar) {
        this.cmdBtn_retornar = cmdBtn_retornar;
    }

    public CoreCommandButton getCmdBtn_retornar() {
        return cmdBtn_retornar;
    }

    public void setPnlBox_informacionSolicitante(CorePanelBox pnlBox_informacionSolicitante) {
        this.pnlBox_informacionSolicitante = pnlBox_informacionSolicitante;
    }

    public CorePanelBox getPnlBox_informacionSolicitante() {
        return pnlBox_informacionSolicitante;
    }

    public void slctOneChoice_tipoGestion_valueChangeListener(ValueChangeEvent valueChangeEvent) {
        int opcionSeleccionada;
        if (valueChangeEvent.getNewValue() != null) {
            opcionSeleccionada = 
                    Integer.parseInt(valueChangeEvent.getNewValue().toString());
            //System.out.println("La opcion seleccionada es: " + opcionSeleccionada);
            if (opcionSeleccionada == 0) { //Indemnización por Retiro
                this.getPnlHoriz_solicitante_postmortem().setRendered(false);
                this.getPnlHoriz_solicitante_postmortemB().setRendered(false);
                this.getPnlHoriz_solicitante_postmortemC().setRendered(false);
                this.getMessages_paso1_below().setRendered(false);
                this.getPnlBox_informacionSolicitante().setText("");
            } else { //Prestaciones Post-mortem
                this.getPnlHoriz_solicitante_postmortem().setRendered(true);
                this.getPnlHoriz_solicitante_postmortemB().setRendered(true);
                this.getPnlHoriz_solicitante_postmortemC().setRendered(true);
                this.getMessages_paso1_below().setRendered(true);
                this.getPnlBox_informacionSolicitante().setText("Datos del Solicitante");
            }
        }
    }

    public void setPnlForm_solicitante(CorePanelForm pnlForm_solicitante) {
        this.pnlForm_solicitante = pnlForm_solicitante;
    }

    public CorePanelForm getPnlForm_solicitante() {
        return pnlForm_solicitante;
    }

    public void setPnlHoriz_solicitante_postmortem(CorePanelHorizontal pnlHoriz_solicitante_postmortem) {
        this.pnlHoriz_solicitante_postmortem = pnlHoriz_solicitante_postmortem;
    }

    public CorePanelHorizontal getPnlHoriz_solicitante_postmortem() {
        return pnlHoriz_solicitante_postmortem;
    }

    public void setPnlHoriz_solicitante_postmortemB(CorePanelHorizontal pnlHoriz_solicitante_postmortemB) {
        this.pnlHoriz_solicitante_postmortemB = 
                pnlHoriz_solicitante_postmortemB;
    }

    public CorePanelHorizontal getPnlHoriz_solicitante_postmortemB() {
        return pnlHoriz_solicitante_postmortemB;
    }

    public void setPnlHoriz_solicitante_postmortemC(CorePanelHorizontal pnlHoriz_solicitante_postmortemC) {
        this.pnlHoriz_solicitante_postmortemC = 
                pnlHoriz_solicitante_postmortemC;
    }

    public CorePanelHorizontal getPnlHoriz_solicitante_postmortemC() {
        return pnlHoriz_solicitante_postmortemC;
    }

    public void setMessages_paso1_above(CoreMessages messages_paso1_above) {
        this.messages_paso1_above = messages_paso1_above;
    }

    public CoreMessages getMessages_paso1_above() {
        return messages_paso1_above;
    }

    public void setMessages_paso1_below(CoreMessages messages_paso1_below) {
        this.messages_paso1_below = messages_paso1_below;
    }

    public CoreMessages getMessages_paso1_below() {
        return messages_paso1_below;
    }

    public void setCmdBtn_verReporteBasico(CoreCommandButton cmdBtn_verReporteBasico) {
        this.cmdBtn_verReporteBasico = cmdBtn_verReporteBasico;
    }

    public CoreCommandButton getCmdBtn_verReporteBasico() {
        return cmdBtn_verReporteBasico;
    }

    public void setCmdBtn_verReporteDARH_PM01(CoreCommandButton cmdBtn_verReporteDARH_PM01) {
        this.cmdBtn_verReporteDARH_PM01 = cmdBtn_verReporteDARH_PM01;
    }

    public CoreCommandButton getCmdBtn_verReporteDARH_PM01() {
        return cmdBtn_verReporteDARH_PM01;
    }

    public void setCmdLink_trasladar_solicitud(CoreCommandLink cmdLink_trasladar_solicitud) {
        this.cmdLink_trasladar_solicitud = cmdLink_trasladar_solicitud;
    }

    public CoreCommandLink getCmdLink_trasladar_solicitud() {
        return cmdLink_trasladar_solicitud;
    }

    public void setCmdBtn_retornar_calculo(CoreCommandButton cmdBtn_retornar_calculo) {
        this.cmdBtn_retornar_calculo = cmdBtn_retornar_calculo;
    }

    public CoreCommandButton getCmdBtn_retornar_calculo() {
        return cmdBtn_retornar_calculo;
    }

    public String cmdBtn_retornar_calculo_action() {
        return "ir_a_listado_indemnizaciones";
    }

    public void setInptText_serieFacturaPost(CoreInputText inptText_serieFacturaPost) {
        this.inptText_serieFacturaPost = inptText_serieFacturaPost;
    }

    public CoreInputText getInptText_serieFacturaPost() {
        return inptText_serieFacturaPost;
    }

    public void setInptText_numeroFactPost(CoreInputText inptText_numeroFactPost) {
        this.inptText_numeroFactPost = inptText_numeroFactPost;
    }

    public CoreInputText getInptText_numeroFactPost() {
        return inptText_numeroFactPost;
    }

    public void setSlctInputDate_fechaFactPost(CoreSelectInputDate slctInputDate_fechaFactPost) {
        this.slctInputDate_fechaFactPost = slctInputDate_fechaFactPost;
    }

    public CoreSelectInputDate getSlctInputDate_fechaFactPost() {
        return slctInputDate_fechaFactPost;
    }

    public void setInptText_nombreFunerariaPost(CoreInputText inptText_nombreFunerariaPost) {
        this.inptText_nombreFunerariaPost = inptText_nombreFunerariaPost;
    }

    public CoreInputText getInptText_nombreFunerariaPost() {
        return inptText_nombreFunerariaPost;
    }

    public void setInptText_montoFacturaPost(CoreInputText inptText_montoFacturaPost) {
        this.inptText_montoFacturaPost = inptText_montoFacturaPost;
    }

    public CoreInputText getInptText_montoFacturaPost() {
        return inptText_montoFacturaPost;
    }

    public void setCmdBtn_comprobar_gasto_funerario(CoreCommandButton cmdBtn_comprobar_gasto_funerario) {
        this.cmdBtn_comprobar_gasto_funerario = 
                cmdBtn_comprobar_gasto_funerario;
    }

    public CoreCommandButton getCmdBtn_comprobar_gasto_funerario() {
        return cmdBtn_comprobar_gasto_funerario;
    }

    public void setCmdBtn_guardar_gasto_funerario(CoreCommandButton cmdBtn_guardar_gasto_funerario) {
        this.cmdBtn_guardar_gasto_funerario = cmdBtn_guardar_gasto_funerario;
    }

    public CoreCommandButton getCmdBtn_guardar_gasto_funerario() {
        return cmdBtn_guardar_gasto_funerario;
    }

    public String cmdBtn_cancelar_gasto_funerario_action() {
        FacesContext f = FacesContext.getCurrentInstance();
        JSFUtils.EjecutarAcccion(f, "RecuperarIndemnizacion");
        JSFUtils.EjecutarAcccion(f, "RefrescarIndemnizacion");
        habilitar_componentes_gasto_funerario(false);
        mensaje("Se cancelaron los cambios no guardados correctamente.", 1);
        return null;
    }

    public String cmdBtn_retornar_gasto_funerario_action() {
        return "ir_a_listado_indemnizaciones";
    }

    public void setCmdBtn_retornar_gasto_funerario(CoreCommandButton cmdBtn_retornar_gasto_funerario) {
        this.cmdBtn_retornar_gasto_funerario = cmdBtn_retornar_gasto_funerario;
    }

    public CoreCommandButton getCmdBtn_retornar_gasto_funerario() {
        return cmdBtn_retornar_gasto_funerario;
    }

    public void setCmdLink_trasladar_gasto_funerario(CoreCommandLink cmdLink_trasladar_gasto_funerario) {
        this.cmdLink_trasladar_gasto_funerario = 
                cmdLink_trasladar_gasto_funerario;
    }

    public CoreCommandLink getCmdLink_trasladar_gasto_funerario() {
        return cmdLink_trasladar_gasto_funerario;
    }

    public void setCmdLink_trasladar_calculo(CoreCommandLink cmdLink_trasladar_calculo) {
        this.cmdLink_trasladar_calculo = cmdLink_trasladar_calculo;
    }

    public CoreCommandLink getCmdLink_trasladar_calculo() {
        return cmdLink_trasladar_calculo;
    }

    public void setInptHidden_gastoFunerario(CoreInputHidden inptHidden_gastoFunerario) {
        this.inptHidden_gastoFunerario = inptHidden_gastoFunerario;
    }

    public CoreInputHidden getInptHidden_gastoFunerario() {
        return inptHidden_gastoFunerario;
    }

    public void setCmdBtn_verReporteDARHSJI1(CoreCommandButton cmdBtn_verReporteDARHSJI1) {
        this.cmdBtn_verReporteDARHSJI1 = cmdBtn_verReporteDARHSJI1;
    }

    public CoreCommandButton getCmdBtn_verReporteDARHSJI1() {
        return cmdBtn_verReporteDARHSJI1;
    }

    public void setCmdBtn_guardarRelacionLab(CoreCommandButton cmdBtn_guardarRelacionLab) {
        this.cmdBtn_guardarRelacionLab = cmdBtn_guardarRelacionLab;
    }

    public CoreCommandButton getCmdBtn_guardarRelacionLab() {
        return cmdBtn_guardarRelacionLab;
    }

    private void guardarRelacionLaboral() {
        int numFilas = this.getTbl_relacionLaboral().getRowCount();
        JUCtrlValueBindingRef rwRef;
        Row rw;
        Object  aux;
        //System.out.println("El número de filas es: " + numFilas);
        for (int i = 0; i < numFilas; i++) {
            rwRef = 
                    (JUCtrlValueBindingRef)this.getTbl_relacionLaboral().getRowData(i);
            rw = rwRef.getRow();
            aux = rw.getAttribute("Partida");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("Partida Undefined"); }
            aux = rw.getAttribute("NumeroPlaza");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("NumeroPlaza Undefined"); }
            aux = rw.getAttribute("Anio");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("Anio Undefined"); }
            aux = rw.getAttribute("J1");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J1 Undefined"); }
            aux = rw.getAttribute("J2");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J2 Undefined"); }
            aux = rw.getAttribute("J3");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J3 Undefined"); }
            aux = rw.getAttribute("J4");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J4 Undefined"); }
            aux = rw.getAttribute("J5");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J5 Undefined"); }
            aux = rw.getAttribute("J6");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J6 Undefined"); }
            aux = rw.getAttribute("J7");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J7 Undefined"); }
            aux = rw.getAttribute("J8");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J8 Undefined"); }
            aux = rw.getAttribute("J9");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J9 Undefined"); }
            aux = rw.getAttribute("J10");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J10 Undefined"); }
            aux = rw.getAttribute("J11");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J11 Undefined"); }
            aux = rw.getAttribute("J12");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("J13 Undefined"); }
            aux = rw.getAttribute("Anios");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("Anios Undefined"); }
            aux = rw.getAttribute("Meses");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("Mese Undefined"); }
            aux = rw.getAttribute("Dias");
            if (aux!=null) { System.out.println(aux.toString()); } else { System.out.println("Dias Undefined"); }
        }
        Iterator it = this.getTbl_relacionLaboral().getSelectionState().getKeySet().iterator();
        JUIteratorBinding vIterBinding = (JUIteratorBinding) JSFUtils.resolveExpression(FacesContext.getCurrentInstance(),"#{bindings.SisRelacionLaboral_vw1Iterator}");
        RowSetIterator vBinding=vIterBinding.getRowSetIterator();
        while(it.hasNext()){
            String key = it.next().toString();
            System.out.println("hola: " + key);
        }
    }

    public String cmdBtn_guardarRelacionLab_action() {
        guardarRelacionLaboral();
        return null;
    }

    public void setTbl_relacionLaboral(CoreTable tbl_relacionLaboral) {
        this.tbl_relacionLaboral = tbl_relacionLaboral;
    }

    public CoreTable getTbl_relacionLaboral() {
        return tbl_relacionLaboral;
    }
}
